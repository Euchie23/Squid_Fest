print(all_results)
print(yearly_data)
print(all_results20)
print(all_results21)
print(list3)
#' === MAIN FUNCTION ===
# This function calculates Estimated Daily Intake (EDI) and Hazard Quotient (HQ) values for various pollutants (either trace metals or organic compounds) found in squid tissue.The goal is to estimate potential human health risks from consuming contaminated squid by comparing observed pollutant concentrations to established safety thresholds.The function first determines whether the dataset includes trace metals or organic pollutants. Based on this, it sets the correct concentration columns and joins reference data, including oral reference doses and recommended levels and the average weight and seafood consumption of the general population of two consumers of these squid species .It then reshapes the data into a long format and filters it to focus on muscle tissue only, which is most relevant for human consumption. Optionally, it can remove zero values if needed.For each year in the dataset, and for each pollutant, the function calculates:
# - Mean and 95th percentile concentrations
# - Corresponding EDI values for two countries (Argentina and Taiwan)
# - HQ values for both countries, which are ratios of EDI to oral reference doses
#
# These metrics are returned in a combined summary table that can be used to assess how pollutant exposure changes over time and whether it exceeds safety levels.
EDI_and_HQ_calculations <- function(data_list, remove.zeroes = FALSE) {
df <- data_list$dataset_with_numerical_values
# Detect pollutant type and reference levels
info <- get_pollutant_info(df)
df <- info$df
range <- info$range
number_range <- info$number_range
recommended_levels <- info$recommended_levels
# Reshape and filter data
long_df <- reshape_and_join_data(df, range, recommended_levels, remove.zeroes)
# Compute THQ values year by year
years <- unique(df$Year)
pollutants <- colnames(df)[number_range]
#Creating empty lists
list0 <- list(); list1 <- list(); list2 <- list(); list3 <- list(); list34names <- list()
for (year in years) {
#to get pollution summary per year and save it as the final df after combining the rows
all_results <- data.frame(matrix(ncol=15, nrow = 0))
#creating list to save plots names
list12names <- list()
yearly_data <- calculate_yearly_summary(long_df, pollutants, year)
all_results <-rbind(all_results, yearly_data)
#rounding all values in columns 4 to 15
all_results[,c(4:15)] <- round(all_results[,c(4:15)],2)
# Selecting specific columns (HQ metrics by country) to reshape into long format
columz=c("Arg_HQ_mean","Tai_HQ_mean","Arg_HQ_95_percentile","Tai_HQ_95_percentile")
# Reshaping the dataset from wide to long format for easier comparison across countries and percentiles
long_yearly_data <- as.data.frame(yearly_data %>% pivot_longer(cols = all_of(columz), names_to = "countries", values_to = "values"))
is_metal <- grepl("Metal", colnames(df)[16])  # Or some smarter check
dataset <- long_yearly_data  # Dataset for yearly plots with pollutants on the x axis
plots <- create_yearly_plots(year, dataset, is_metal)
if (year == "2019") {
list0 <- plots
} else if (year == "2020") {
list1 <- plots
} else if (year == "2021") {
list2 <- plots
}
# creating and saving names for plots within the lists
name1 <- paste(year,"_HQbarplots", sep = "")
name2 <- paste(year,"_TotalHQ", sep = "")
list12names <- append(list12names,name1)
list12names <- append(list12names,name2)
# naming the items in the sublists that are within the last list
if (year == "2019") {
names(list0)<-list12names
# subsetting the all_results datasets for 2019 data
all_results19 <- subset(all_results, Year == '2019')
# saving and naming the 2019 all_results datasets within the last list
list3<-append(list(all_results19),list3, 0)
name3 <- paste(year,"_EDI_and_HQ_stats", sep = "")
list34names <- append(list34names,name3)
#names(list3)<-name3
} else if (year == "2020") {
names(list1)<-list12names
# subsetting the all_results datasets for 2020 data
all_results20 <- subset(all_results, Year == '2020')
# saving and naming the 2020 all_results datasets within the last list
list3<-append(list(all_results20),list3, 0)
name3 <- paste(year,"_EDI_and_HQ_stats", sep = "")
list34names <- append(list34names,name3)
} else if (year == "2021") {
names(list2)<-list12names
# subsetting the all_results datasets for 2021
all_results21 <- subset(all_results, Year == '2021')
# saving and naming the 2021 all_results datasets within the last list
list3<-append(list(all_results21),list3, 0)
name3 <- paste(year,"_EDI_and_HQ_stats", sep = "")
list34names <- append(list34names,name3)
}
}
names(list3)<-list34names
#Naming the list and returning plots
return(list(pollutant2019 = list0, pollutant2020 = list1, pollutant2021 = list2, FullEDI_HQstats = list3))
}
EDI_and_HQ_stats <- EDI_and_HQ_calculations(datasets_for_trace_metals, remove.zeroes = TRUE)
View(EDI_and_HQ_stats[["FullEDI_HQstats"]][["2019_EDI_and_HQ_stats"]])
View(EDI_and_HQ_stats[["FullEDI_HQstats"]][["2020_EDI_and_HQ_stats"]])
#' === MAIN FUNCTION ===
# This function calculates Estimated Daily Intake (EDI) and Hazard Quotient (HQ) values for various pollutants (either trace metals or organic compounds) found in squid tissue.The goal is to estimate potential human health risks from consuming contaminated squid by comparing observed pollutant concentrations to established safety thresholds.The function first determines whether the dataset includes trace metals or organic pollutants. Based on this, it sets the correct concentration columns and joins reference data, including oral reference doses and recommended levels and the average weight and seafood consumption of the general population of two consumers of these squid species .It then reshapes the data into a long format and filters it to focus on muscle tissue only, which is most relevant for human consumption. Optionally, it can remove zero values if needed.For each year in the dataset, and for each pollutant, the function calculates:
# - Mean and 95th percentile concentrations
# - Corresponding EDI values for two countries (Argentina and Taiwan)
# - HQ values for both countries, which are ratios of EDI to oral reference doses
#
# These metrics are returned in a combined summary table that can be used to assess how pollutant exposure changes over time and whether it exceeds safety levels.
EDI_and_HQ_calculations <- function(data_list, remove.zeroes = FALSE) {
df <- data_list$dataset_with_numerical_values
# Detect pollutant type and reference levels
info <- get_pollutant_info(df)
df <- info$df
range <- info$range
number_range <- info$number_range
recommended_levels <- info$recommended_levels
# Reshape and filter data
long_df <- reshape_and_join_data(df, range, recommended_levels, remove.zeroes)
# Compute THQ values year by year
years <- unique(df$Year)
pollutants <- colnames(df)[number_range]
#Creating empty lists
list0 <- list(); list1 <- list(); list2 <- list(); list3 <- list(); list34names <- list()
for (year in years) {
#to get pollution summary per year and save it as the final df after combining the rows
all_results <- data.frame(matrix(ncol=15, nrow = 0))
#creating list to save plots names
list12names <- list()
yearly_data <- calculate_yearly_summary(long_df, pollutants, year)
#resetting row names for yearly data
rownames(yearly_data) <- NULL
all_results <-rbind(all_results, yearly_data)
#rounding all values in columns 4 to 15
all_results[,c(4:15)] <- round(all_results[,c(4:15)],2)
# Selecting specific columns (HQ metrics by country) to reshape into long format
columz=c("Arg_HQ_mean","Tai_HQ_mean","Arg_HQ_95_percentile","Tai_HQ_95_percentile")
# Reshaping the dataset from wide to long format for easier comparison across countries and percentiles
long_yearly_data <- as.data.frame(yearly_data %>% pivot_longer(cols = all_of(columz), names_to = "countries", values_to = "values"))
is_metal <- grepl("Metal", colnames(df)[16])  # Or some smarter check
dataset <- long_yearly_data  # Dataset for yearly plots with pollutants on the x axis
plots <- create_yearly_plots(year, dataset, is_metal)
if (year == "2019") {
list0 <- plots
} else if (year == "2020") {
list1 <- plots
} else if (year == "2021") {
list2 <- plots
}
# creating and saving names for plots within the lists
name1 <- paste(year,"_HQbarplots", sep = "")
name2 <- paste(year,"_TotalHQ", sep = "")
list12names <- append(list12names,name1)
list12names <- append(list12names,name2)
# naming the items in the sublists that are within the last list
if (year == "2019") {
names(list0)<-list12names
# subsetting the all_results datasets for 2019 data
all_results19 <- subset(all_results, Year == '2019')
# saving and naming the 2019 all_results datasets within the last list
list3<-append(list(all_results19),list3, 0)
name3 <- paste(year,"_EDI_and_HQ_stats", sep = "")
list34names <- append(list34names,name3)
#names(list3)<-name3
} else if (year == "2020") {
names(list1)<-list12names
# subsetting the all_results datasets for 2020 data
all_results20 <- subset(all_results, Year == '2020')
# saving and naming the 2020 all_results datasets within the last list
list3<-append(list(all_results20),list3, 0)
name3 <- paste(year,"_EDI_and_HQ_stats", sep = "")
list34names <- append(list34names,name3)
} else if (year == "2021") {
names(list2)<-list12names
# subsetting the all_results datasets for 2021
all_results21 <- subset(all_results, Year == '2021')
# saving and naming the 2021 all_results datasets within the last list
list3<-append(list(all_results21),list3, 0)
name3 <- paste(year,"_EDI_and_HQ_stats", sep = "")
list34names <- append(list34names,name3)
}
}
names(list3)<-list34names
#Naming the list and returning plots
return(list(pollutant2019 = list0, pollutant2020 = list1, pollutant2021 = list2, FullEDI_HQstats = list3))
}
EDI_and_HQ_stats <- EDI_and_HQ_calculations(datasets_for_trace_metals, remove.zeroes = TRUE)
View(EDI_and_HQ_stats[["FullEDI_HQstats"]][["2019_EDI_and_HQ_stats"]])
View(EDI_and_HQ_stats[["FullEDI_HQstats"]][["2020_EDI_and_HQ_stats"]])
#Below code saves and combines multiple plots into individual PNG files. It loops through the list of plots in each year and combines the two plots into one png then saves them in their respective folders it also extracts the dataset saves it as an excel file which is converted into a table using VBA macros.
save_custom_outputs <- function(output_list) {
years <- c('2019', '2020', '2021')  # Expected years
for (year in years) {
# Try to find the sublist name that contains this year
matching_name <- names(output_list)[grepl(year, names(output_list))]
if (length(matching_name) == 0) {
cat("⚠️ No data for year:", year, "\n")
next
}
year_data <- output_list[[matching_name]]
# Extract the two ggplot objects from the first sublist
plot_pair <- year_data[[1]]
if (length(year_data) != 2 || !all(sapply(year_data, inherits, "gg"))) {
cat("⚠️ Skipping year", year, "- first sublist must contain exactly 2 ggplot objects.\n")
next
}
# Detect pollutant type to choose output folder
example_plot_data <- plot_pair[[1]]
pollutant_types <- unique(example_plot_data$pollutant)
if (any(grepl("Metal", pollutant_types, ignore.case = TRUE))) {
root_folder <- "Squid_Concentration_Analysis/5-Human_Health_Risk/EDI_and_HQ_plots_and_tables/Trace_metals"
file_name <- print(paste("EDI_and_HQ_tables_tm_",year,".xlsm", sep = ""))
excel_file <- file.path(root_folder, year, file_name)
} else {
root_folder <- "Squid_Concentration_Analysis/5-Human_Health_Risk/EDI_and_HQ_plots_and_tables/Organic_compounds"
file_name <- print(paste("EDI_and_HQ_tables_oc_",year,".xlsm", sep = ""))
excel_file <- file.path(root_folder, year, file_name)
}
# Create year-specific folder
output_folder <- file.path(root_folder, year)
if (!dir.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
}
# Combine and save the two plots side by side
combined_plot <- grid.arrange(grobs = year_data, ncol = 2)
plot_filename <- paste0("EDI_and_HQ_plots_", year, ".png")
png_path <- file.path(output_folder, plot_filename)
tryCatch({
png(png_path, width = 1800, height = 1000)
grid.draw(combined_plot)
dev.off()
cat("✅ Plot saved:", png_path, "\n")
}, error = function(e) {
cat("❌ Error saving plot for year", year, ":", e$message, "\n")
})
# Process 4th sublist (data.frame)
df <- as.data.frame(output_list[[4]])
if (!is.data.frame(df)) {
cat("❌ Year", year, "4th sublist is not a data frame. Skipping Excel export.\n")
next
}
# Write the data frame to Excel
if (file.exists(excel_file)) {
wb <- loadWorkbook(excel_file)
if ("summary" %in% tolower(names(wb))) {
removeWorksheet(wb, names(wb)[tolower(names(wb)) == "summary"])
}
} else {
wb <- createWorkbook()
}
addWorksheet(wb, "summary")
writeData(wb, "summary", df)
saveWorkbook(wb, file = excel_file, overwrite = TRUE)
cat("✅ Excel file saved for year", year, "at", excel_file, "\n")
}
}
save_custom_outputs(EDI_and_HQ_stats)
save_custom_outputs(EDI_and_HQ_stats)
View(EDI_and_HQ_stats[["FullEDI_HQstats"]][["2019_EDI_and_HQ_stats"]])
debug(save_custom_outputs)
save_custom_outputs(EDI_and_HQ_stats)
print(matching_name)
print(plot_pair)
print(example_plot_data)
print(file_name)
print(excel_file)
print(png_path)
print(df)
undebug(save_custom_outputs)
debug(save_custom_outputs)
save_custom_outputs(EDI_and_HQ_stats)
print(example_plot_data)
print(year_data)
print(matching_name)
print(output_list)
print(matching_name)
#Below code saves and combines multiple plots into individual PNG files. It loops through the list of plots in each year and combines the two plots into one png then saves them in their respective folders it also extracts the dataset saves it as an excel file which is converted into a table using VBA macros.
save_custom_outputs <- function(output_list) {
years <- c('2019', '2020', '2021')  # Expected years
for (year in years) {
# Try to find the sublist name that contains this year
matching_name <- names(output_list)[grepl(year, names(output_list))]
if (length(matching_name) == 0) {
cat("⚠️ No data for year:", year, "\n")
next
}
year_data <- output_list[[matching_name]]
# Extract the two ggplot objects from the first sublist
plot_pair <- year_data[[1]]
if (length(year_data) != 2 || !all(sapply(year_data, inherits, "gg"))) {
cat("⚠️ Skipping year", year, "- first sublist must contain exactly 2 ggplot objects.\n")
next
}
# Detect pollutant type to choose output folder
example_plot_data <- plot_pair[[1]]
pollutant_types <- unique(example_plot_data$pollutant)
if (any(grepl("Metal", pollutant_types, ignore.case = TRUE))) {
root_folder <- "Squid_Concentration_Analysis/5-Human_Health_Risk/EDI_and_HQ_plots_and_tables/Trace_metals"
file_name <- print(paste("EDI_and_HQ_tables_tm_",year,".xlsm", sep = ""))
excel_file <- file.path(root_folder, year, file_name)
} else {
root_folder <- "Squid_Concentration_Analysis/5-Human_Health_Risk/EDI_and_HQ_plots_and_tables/Organic_compounds"
file_name <- print(paste("EDI_and_HQ_tables_oc_",year,".xlsm", sep = ""))
excel_file <- file.path(root_folder, year, file_name)
}
# Create year-specific folder
output_folder <- file.path(root_folder, year)
if (!dir.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
}
# Combine and save the two plots side by side
combined_plot <- grid.arrange(grobs = year_data, ncol = 2)
plot_filename <- paste0("EDI_and_HQ_plots_", year, ".png")
png_path <- file.path(output_folder, plot_filename)
tryCatch({
png(png_path, width = 1800, height = 1000)
grid.draw(combined_plot)
dev.off()
cat("✅ Plot saved:", png_path, "\n")
}, error = function(e) {
cat("❌ Error saving plot for year", year, ":", e$message, "\n")
})
# Process 4th sublist (data.frame)
# Try to find the sublist name that contains this year
matching_name2 <- names(output_list[[4]])[grepl(year, names(output_list[[4]]))]
df <- as.data.frame(output_list[[4]][[matching_name]])
if (!is.data.frame(df)) {
cat("❌ Year", year, "4th sublist is not a data frame. Skipping Excel export.\n")
next
}
# Write the data frame to Excel
if (file.exists(excel_file)) {
wb <- loadWorkbook(excel_file)
if ("summary" %in% tolower(names(wb))) {
removeWorksheet(wb, names(wb)[tolower(names(wb)) == "summary"])
}
} else {
wb <- createWorkbook()
}
addWorksheet(wb, "summary")
writeData(wb, "summary", df)
saveWorkbook(wb, file = excel_file, overwrite = TRUE)
cat("✅ Excel file saved for year", year, "at", excel_file, "\n")
}
}
save_custom_outputs(EDI_and_HQ_stats)
debug(save_custom_outputs)
save_custom_outputs(EDI_and_HQ_stats)
print(matching_name2)
print(df)
#Below code saves and combines multiple plots into individual PNG files. It loops through the list of plots in each year and combines the two plots into one png then saves them in their respective folders it also extracts the dataset saves it as an excel file which is converted into a table using VBA macros.
save_custom_outputs <- function(output_list) {
years <- c('2019', '2020', '2021')  # Expected years
for (year in years) {
# Try to find the sublist name that contains this year
matching_name <- names(output_list)[grepl(year, names(output_list))]
if (length(matching_name) == 0) {
cat("⚠️ No data for year:", year, "\n")
next
}
year_data <- output_list[[matching_name]]
# Extract the two ggplot objects from the first sublist
plot_pair <- year_data[[1]]
if (length(year_data) != 2 || !all(sapply(year_data, inherits, "gg"))) {
cat("⚠️ Skipping year", year, "- first sublist must contain exactly 2 ggplot objects.\n")
next
}
# Detect pollutant type to choose output folder
example_plot_data <- plot_pair[[1]]
pollutant_types <- unique(example_plot_data$pollutant)
if (any(grepl("Metal", pollutant_types, ignore.case = TRUE))) {
root_folder <- "Squid_Concentration_Analysis/5-Human_Health_Risk/EDI_and_HQ_plots_and_tables/Trace_metals"
file_name <- print(paste("EDI_and_HQ_tables_tm_",year,".xlsm", sep = ""))
excel_file <- file.path(root_folder, year, file_name)
} else {
root_folder <- "Squid_Concentration_Analysis/5-Human_Health_Risk/EDI_and_HQ_plots_and_tables/Organic_compounds"
file_name <- print(paste("EDI_and_HQ_tables_oc_",year,".xlsm", sep = ""))
excel_file <- file.path(root_folder, year, file_name)
}
# Create year-specific folder
output_folder <- file.path(root_folder, year)
if (!dir.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
}
# Combine and save the two plots side by side
combined_plot <- grid.arrange(grobs = year_data, ncol = 2)
plot_filename <- paste0("EDI_and_HQ_plots_", year, ".png")
png_path <- file.path(output_folder, plot_filename)
tryCatch({
png(png_path, width = 1800, height = 1000)
grid.draw(combined_plot)
dev.off()
cat("✅ Plot saved:", png_path, "\n")
}, error = function(e) {
cat("❌ Error saving plot for year", year, ":", e$message, "\n")
})
# Process 4th sublist (data.frame)
# Try to find the sublist name that contains this year
matching_name2 <- names(output_list[[4]])[grepl(year, names(output_list[[4]]))]
df <- as.data.frame(output_list[[4]][[matching_name2]])
if (!is.data.frame(df)) {
cat("❌ Year", year, "4th sublist is not a data frame. Skipping Excel export.\n")
next
}
# Write the data frame to Excel
if (file.exists(excel_file)) {
wb <- loadWorkbook(excel_file)
if ("summary" %in% tolower(names(wb))) {
removeWorksheet(wb, names(wb)[tolower(names(wb)) == "summary"])
}
} else {
wb <- createWorkbook()
}
addWorksheet(wb, "summary")
writeData(wb, "summary", df)
saveWorkbook(wb, file = excel_file, overwrite = TRUE)
cat("✅ Excel file saved for year", year, "at", excel_file, "\n")
}
}
save_custom_outputs(EDI_and_HQ_stats)
debug(save_custom_outputs)
save_custom_outputs(EDI_and_HQ_stats)
print(df)
debug(save_custom_outputs)
save_custom_outputs(EDI_and_HQ_stats)
print(df)
print(wb)
print(df)
print(wb)
debug(save_custom_outputs)
save_custom_outputs(EDI_and_HQ_stats)
print(df)
print(unique(df$Year))
EDI_and_HQ_stats <- EDI_and_HQ_calculations(datasets_for_trace_metals, remove.zeroes = TRUE)
save_custom_outputs(EDI_and_HQ_stats)
undebug(save_custom_outputs)
save_custom_outputs(EDI_and_HQ_stats)
save_custom_outputs(EDI_and_HQ_stats)
save_custom_outputs(EDI_and_HQ_stats)
save_custom_outputs(EDI_and_HQ_stats)
save_custom_outputs(EDI_and_HQ_stats)
#Below code saves and combines multiple plots into individual PNG files. It loops through the list of plots in each year and combines the two plots into one png then saves them in their respective folders it also extracts the dataset saves it as an excel file which is converted into a table using VBA macros.
save_custom_outputs <- function(output_list) {
years <- c('2019', '2020', '2021')  # Expected years
for (year in years) {
# Try to find the sublist name that contains this year
matching_name <- names(output_list)[grepl(year, names(output_list))]
if (length(matching_name) == 0) {
cat("⚠️ No data for year:", year, "\n")
next
}
year_data <- output_list[[matching_name]]
# Extract the two ggplot objects from the first sublist
plot_pair <- year_data[[1]]
if (length(year_data) != 2 || !all(sapply(year_data, inherits, "gg"))) {
cat("⚠️ Skipping year", year, "- first sublist must contain exactly 2 ggplot objects.\n")
next
}
# Detect pollutant type to choose output folder
example_plot_data <- plot_pair[[1]]
pollutant_types <- unique(example_plot_data$pollutant)
if (any(grepl("Metal", pollutant_types, ignore.case = TRUE))) {
root_folder <- "Squid_Concentration_Analysis/5-Human_Health_Risk/EDI_and_HQ_plots_and_tables/Trace_metals"
file_name <- print(paste("EDI_and_HQ_tables_tm_",year,".xlsm", sep = ""))
excel_file <- file.path(root_folder, year, file_name)
} else {
root_folder <- "Squid_Concentration_Analysis/5-Human_Health_Risk/EDI_and_HQ_plots_and_tables/Organic_compounds"
file_name <- print(paste("EDI_and_HQ_tables_oc_",year,".xlsm", sep = ""))
excel_file <- file.path(root_folder, year, file_name)
}
# Create year-specific folder
output_folder <- file.path(root_folder, year)
if (!dir.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
}
# Combine and save the two plots side by side
combined_plot <- grid.arrange(grobs = year_data, ncol = 2)
plot_filename <- paste0("EDI_and_HQ_plots_", year, ".png")
png_path <- file.path(output_folder, plot_filename)
tryCatch({
png(png_path, width = 1800, height = 1000)
grid.draw(combined_plot)
dev.off()
cat("✅ Plot saved:", png_path, "\n")
}, error = function(e) {
cat("❌ Error saving plot for year", year, ":", e$message, "\n")
})
# Process 4th sublist (data.frame)
# Try to find the sublist name that contains this year
matching_name2 <- names(output_list[[4]])[grepl(year, names(output_list[[4]]))]
df <- as.data.frame(output_list[[4]][[matching_name2]])
if (!is.data.frame(df)) {
cat("❌ Year", year, "4th sublist is not a data frame. Skipping Excel export.\n")
next
}
# Write the data frame to Excel
if (file.exists(excel_file)) {
wb <- loadWorkbook(excel_file)
# Delete "FormattedView" sheet if exists
if ("FormattedView" %in% names(wb)) {
removeWorksheet(wb, "FormattedView")
}
# Delete "summary" sheet if exists
if ("summary" %in% tolower(names(wb))) {
removeWorksheet(wb, names(wb)[tolower(names(wb)) == "summary"])
}
} else {
wb <- createWorkbook()
}
addWorksheet(wb, "summary")
writeData(wb, "summary", df)
saveWorkbook(wb, file = excel_file, overwrite = TRUE)
cat("✅ Excel file saved for year", year, "at", excel_file, "\n")
}
}
save_custom_outputs(EDI_and_HQ_stats)
save_custom_outputs(EDI_and_HQ_stats)
View(EDI_and_HQ_stats[["FullEDI_HQstats"]][["2019_EDI_and_HQ_stats"]])
save_custom_outputs(EDI_and_HQ_stats)
save_custom_outputs(EDI_and_HQ_stats)
save_custom_outputs(EDI_and_HQ_stats)
save_custom_outputs(EDI_and_HQ_stats)
EDI_and_HQ_stats <- EDI_and_HQ_calculations(datasets_for_organic_compounds, remove.zeroes = TRUE)
save_custom_outputs(EDI_and_HQ_stats)
