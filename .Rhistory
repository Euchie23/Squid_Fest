#subsetted_dataset_with_numerical_values <- dataset_with_numerical_values[,c(7:9,11:15,number_range,6,3)]# subsetting needed columns for futher analysis
# Step 4: Loop through variables and calculate coefficients
for (h in 1:4) {
cat("\n")
cat("\n")
subsetted_dataset_with_numerical_values <- dataset_with_numerical_values[,c(7:9,11,13,15,12,14,number_range,6,3)]# subsetting needed columns for futher analysis (arranged in alphabetical order)
tissues <- levels(factor(subsetted_dataset_with_numerical_values$Tissue, levels = c("liver", "stomach", "muscle", "inksac")))#creating a vector of tissues for later data processing
print(tissues[h])
# coefficients_accumulated <- data.frame(matrix(ncol = 8, nrow = 0))
pvalues_accumulated <- data.frame(matrix(ncol = 7, nrow = 0))
# subsetted_dataset_with_numerical_values2 <- subsetted_dataset_with_numerical_values #saving subsetted dataset to a new dataset
for(i in 1:8) {
cat("\n")
variable <- colnames(subsetted_dataset_with_numerical_values)[i]
print(variable)
#print(tissues[h])
# Step 5: Long format transformation of the dataset
if (remove.zeroes == FALSE) {
long_dataset <- subsetted_dataset_with_numerical_values %>%
pivot_longer(all_of(range), names_to = "pollutants", values_to = "concentrations") %>%
pivot_longer(!!rlang::sym(paste(variable)), names_to = "vars", values_to = "Values")%>%
mutate(
# # Save original coordinate values only for Longitude/Latitude
# coord_label = case_when(
#   vars %in% c("Latitude") ~ Values,
#   TRUE ~ NA_character_
# ),
# Convert Values appropriately
# Values = case_when(
#   vars == "Gender" ~ as.numeric(as.character(Values)),
#   #vars == "Maturity_level" ~ as.character(Values),
#   # vars %in% c("Latitude") ~ convert_dms_to_decimal(Values),
#   # TRUE ~ as.numeric(Values)
# ),
concentrations = as.numeric(concentrations)
)
} else {
long_dataset <- subsetted_dataset_with_numerical_values %>%
pivot_longer(all_of(range), names_to = "pollutants", values_to = "concentrations") %>%
pivot_longer(!!rlang::sym(paste(variable)), names_to = "vars", values_to = "Values") %>%
filter(concentrations != 0) %>%
mutate(
# Save original coordinate values only for Longitude/Latitude
# coord_label = case_when(
#   vars %in% c("Latitude") ~ Values,
#   TRUE ~ NA_character_
# ),
# Convert Values appropriately
# Values = case_when(
#   vars == "Gender" ~ as.numeric(as.character(Values)),
#   #vars == "Maturity_level" ~ as.character(Values),
#   # vars %in% c("Latitude") ~ convert_dms_to_decimal(Values),
#   # TRUE ~ as.numeric(Values)
# ),
concentrations = as.numeric(concentrations)
)
}
# Step 6: Subsetting long dataset by tissues and finding the coefficients
# if (nrow(long_dataset) != 0) {
long_subsetted_tissue_dataset <- long_dataset %>%
group_by(pollutants) %>%
filter(Tissue == tissues[h])
#if (nrow(long_subsetted_tissue_dataset) > 0) {
# Ensuring that Tissue is a factor with the correct order (in terms of most to least likely to be polluted
#long_subsetted_tissue_dataset$Tissue <- factor(long_subsetted_tissue_dataset$Tissue, levels = c("liver", "stomach", "muscle", "inksac"))
# long_subsetted_tissue_dataset$pollutants <- factor(long_subsetted_tissue_dataset$pollutants, levels = sorted_cols)
coefficients <- get_coefficients(long_subsetted_tissue_dataset)
#print(coefficients)
#coefficients_accumulated <- rbind(coefficients_accumulated, coefficients)
#}
#}
# Step 7: Calculate p-values
pvalues <- coefficient_results_modification(coefficients)
pvalues_accumulated <- rbind(pvalues_accumulated, pvalues)
print(pvalues)
# Step 8: Modify accumulated coefficients datasets
#print(coefficients_accumulated)
#
# coefficients_modified <- pvalues[,-c(4:7)] %>%
#   dplyr::distinct(pollutants, y_axis_upper_limit)
# long_dataset2 <- long_dataset %>%
#   left_join(coefficients_modified, by = c('pollutants' = 'pollutants'))
# # Function to replace NA values
# replacing_na <- function(x) {
#   if (is.na(x[10])) {
#     x[10] <- x[7]
#   }
#   return(x)
# }
#
#
# # Apply the function to replace NAs
# long_dataset_modified <- data.frame(t(apply(long_dataset2, 1, replacing_na)))
# colnames(long_dataset_modified) <- colnames(long_dataset2)
# long_dataset_modified$y_axis_upper_limit <- as.numeric(long_dataset_modified$y_axis_upper_limit)
# Filter the modified dataset for the highest y_axis_upper_limit per pollutant within each tissue
# upper_limits <- long_dataset_modified %>%
#   group_by(pollutants) %>%
#   summarise(y_axis_upper_limit = max(y_axis_upper_limit, na.rm = TRUE), .groups = "drop")
if (variable != "Gender") {
# Create x upper and lower limits
# 1. Compute raw x-axis limits from dataset
x_limits <- long_subsetted_tissue_dataset %>%
mutate(Values_numeric = suppressWarnings(as.numeric(as.character(Values)))) %>%
group_by(pollutants) %>%
summarise(
x_axis_lower_limit = min(Values_numeric, na.rm = TRUE),
x_axis_upper_limit = max(Values_numeric, na.rm = TRUE),
.groups = "drop"
)
# 2. Define your full possible pollutant list
if (grepl("Metal", colnames(dataset_with_numerical_values)[16])) {
original_pollutant_list <- c("Metal_A", "Metal_B", "Metal_C","Metal_D", "Metal_E", "Metal_F","Metal_G", "Metal_H", "Metal_I", "Metal_J")
} else {
original_pollutant_list <- c("Organic_A","Organic_B","Organic_C","Organic_D")
}
# 3. Retain only pollutants that still exist in the dataset
pollutant_list <- intersect(original_pollutant_list, unique(long_subsetted_tissue_dataset$pollutants))
# 4. Build x scale dataframe for valid pollutants only
df_scales_x <- data.frame(
pollutants = pollutant_list,
xmin = NA_real_,
xmax = NA_real_
) %>%
left_join(x_limits, by = "pollutants") %>%
mutate(
xmin = coalesce(x_axis_lower_limit, NA_real_),
xmax = coalesce(x_axis_upper_limit, NA_real_),
range_size = xmax - xmin
) %>%
filter(!is.na(xmin) & !is.na(xmax)) %>%
select(pollutants, xmin, xmax, range_size)
# 5. Split and generate axis scales
df_scales_x <- split(df_scales_x, df_scales_x$pollutants)
scales_x <- lapply(df_scales_x, function(x) {
# Check if the column 'Values' in your full dataset is numeric
if (is.numeric(long_subsetted_tissue_dataset$Values)) {
if (x$range_size < 5) {
scale_x_continuous(
limits = c(x$xmin, x$xmax),
breaks = seq(x$xmin, x$xmax, length.out = 5)
)
} else {
scale_x_continuous(limits = c(x$xmin, x$xmax))
}
} else {
scale_x_discrete()
}
})
} else {
scales_x <- NULL
}
# Ensuring that Tissue is a factor with the correct order for 'y' axis scales
#reordered_tissues <- c("liver", "stomach", "muscle", "inksac")
#long_dataset_modified1$Tissue <- factor(long_dataset_modified1$Tissue, levels = c("liver", "stomach", "muscle", "inksac"))
# Y_Axis----
# Create x upper and lower limits
# 1. Generate y-axis limits by pollutant
y_limits <- long_subsetted_tissue_dataset %>%
group_by(pollutants) %>%
summarise(
y_axis_lower_limit = min(concentrations, na.rm = TRUE),
y_axis_upper_limit = if (any(unique(pollutants) %in% pvalues$pollutants)) {
max(concentrations, na.rm = TRUE) / 0.80
} else {
max(concentrations, na.rm = TRUE)
},
.groups = "drop"
)
# 2. Define your full possible list
if (grepl("Metal", colnames(dataset_with_numerical_values)[16])) {
original_pollutant_list <- c("Metal_A", "Metal_B", "Metal_C","Metal_D", "Metal_E", "Metal_F","Metal_G", "Metal_H", "Metal_I", "Metal_J")
original_n <- c(5, 5, 5, 5, 5, 5, 5, 5, 5, 5)
} else {
original_pollutant_list <- c("Organic_A","Organic_B","Organic_C","Organic_D")
original_n <- c(5, 5, 5, 5)
}
# 3. Retain only pollutants that still exist in the dataset
pollutant_list <- intersect(original_pollutant_list, unique(long_subsetted_tissue_dataset$pollutants))
n <- original_n[match(pollutant_list, original_pollutant_list)]  # align n
# 4. Build df_scales_y safely
df_scales_y <- data.frame(
pollutants = pollutant_list,
ymin = NA_real_,
ymax = NA_real_,
n = n
) %>%
left_join(y_limits, by = "pollutants") %>%
mutate(
ymin = coalesce(y_axis_lower_limit, NA_real_),
ymax = coalesce(y_axis_upper_limit, NA_real_)
) %>%
filter(!is.na(ymin) & !is.na(ymax)) %>%  # Keep only those with limits
select(pollutants, ymin, ymax, n)
# 5. Build scales
df_scales_y <- split(df_scales_y, df_scales_y$pollutants)
scales_y <- lapply(df_scales_y, function(x) {
scale_y_continuous(limits = c(x$ymin, x$ymax), n.breaks = x$n)
})
list4<-append(list(pvalues_accumulated),list4, 0)
name4 <- paste(variable,'_',tissues[h],"_coeffcient_results",sep = "")
list4names <- append(list4names,name4)
#print(long_subsetted_tissue_dataset[,c(7:13)])
#print(df_scales)
# Step 1: Prepare plotting_dataset
plotting_dataset <- long_subsetted_tissue_dataset
#print(str(plotting_dataset))
# Step 10: plotting data
if(tissues[h]=='liver'){
if(unique(plotting_dataset$vars)=='Latitude'){
plt <-plotting_dataset %>% ggplot(aes(Values, concentrations, colour = Year, group=Year)) +
geom_smooth(method=lm, se=FALSE)+
labs(title = paste(tools::toTitleCase(tissues[h]),variable,"Vs Concentrations mg/kg",sep =" "),
y = "Concentration mg/kg", x = paste(variable))+
facet_wrap(vars(pollutants), labeller = as_labeller(icons_markdown), scales ="free", ncol=3, drop = TRUE) +
ggh4x::facetted_pos_scales(
x = scales_x,
y = scales_y
)+
theme_icons()+
geom_point(aes(shape = Year, color = Year), size = 2)+
scale_color_manual(
values = c("2019" = "red", "2020" = "green", "2021" = "blue"),
drop = FALSE
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),  # Rotate x-axis labels
plot.margin = margin(20, 20, 20, 20)  # Add margins to give labels more space
)+
{if(nrow(pvalues)!=0) geom_text(pvalues, mapping=aes(label=paste(rho, pvalues, sep= ",")),hjust =0, size = 3.5, fontface="italic", position = position_dodge(width = .1), check_overlap = FALSE)}
list0<-append(list(plt),list0, 0)
name0 <- paste(variable,"_plots_", tissues[h], sep = "")
list0names <- append(list0names,name0)
}else{
#print(str(plotting_dataset))
plt <-plotting_dataset %>% ggplot(aes(Values, concentrations, colour = Year, group=Year)) +
geom_smooth(method=lm, se=FALSE)+
labs(title = paste(tools::toTitleCase(tissues[h]),variable,"Vs Concentrations mg/kg",sep =" "),
y = "Concentration mg/kg", x = paste(variable))+
facet_wrap(vars(pollutants), labeller = as_labeller(icons_markdown), scales ="free", ncol=3, drop = TRUE) +
ggh4x::facetted_pos_scales(
x = scales_x,
y = scales_y
)+
theme_icons()+
geom_point(aes(shape = Year, color = Year), size = 2)+
scale_color_manual(
values = c("2019" = "red", "2020" = "green", "2021" = "blue"),
drop = FALSE
) +
# Conditional X-axis limits (already existing)
#{if(variable=='dta_km|dtfl_km')scale_x_continuous(limits = c(min(long_dataset$Values), max(long_dataset$Values)))}+
# Conditional replacement of 0/1 labels for Gender
{if (unique(plotting_dataset$vars) == 'Gender')
scale_x_continuous(
limits = c(-0.5, 1.5),  # Adjust the x limits to make it more centered
breaks = c(0, 1), # Place breaks at 0 and 1
labels = c("Females", "Males")
) } +
# Optional p-value text
{if(nrow(pvalues)!=0) geom_text(pvalues, mapping=aes(label=paste(rho, pvalues, sep= ",")),hjust =0, size = 3.5, fontface="italic", position = position_dodge(width = .1), check_overlap = FALSE)}
list0<-append(list(plt),list0, 0)
name0 <- paste(variable,"_plots_", tissues[h], sep = "")
list0names <- append(list0names,name0)
}
}else if(tissues[h]=='stomach'){
if(unique(plotting_dataset$vars)=='Latitude'){
plt <-plotting_dataset %>% ggplot(aes(Values, concentrations, colour = Year, group=Year)) +
geom_smooth(method=lm, se=FALSE)+
labs(title = paste(tools::toTitleCase(tissues[h]),variable,"Vs Concentrations mg/kg",sep =" "),
y = "Concentration mg/kg", x = paste(variable))+
facet_wrap(vars(pollutants), labeller = as_labeller(icons_markdown), scales ="free", ncol=3, drop = TRUE) +
ggh4x::facetted_pos_scales(
x = scales_x,
y = scales_y
)+
theme_icons()+
geom_point(aes(shape = Year, color = Year), size = 2)+
scale_color_manual(
values = c("2019" = "red", "2020" = "green", "2021" = "blue"),
drop = FALSE
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),  # Rotate x-axis labels
plot.margin = margin(20, 20, 20, 20)  # Add margins to give labels more space
)+
{if(nrow(pvalues)!=0) geom_text(pvalues, mapping=aes(label=paste(rho, pvalues, sep= ",")),hjust =0, size = 3.5, fontface="italic", position = position_dodge(width = .1), check_overlap = FALSE)}
list1<-append(list(plt),list1, 0)
name1 <- paste(variable,"_plots_", tissues[h], sep = "")
list1names <- append(list1names,name1)
}else{
#print(str(plotting_dataset))
plt <-plotting_dataset %>% ggplot(aes(Values, concentrations, colour = Year, group=Year)) +
geom_smooth(method=lm, se=FALSE)+
labs(title = paste(tools::toTitleCase(tissues[h]),variable,"Vs Concentrations mg/kg",sep =" "),
y = "Concentration mg/kg", x = paste(variable))+
facet_wrap(vars(pollutants), labeller = as_labeller(icons_markdown), scales ="free", ncol=3, drop = TRUE) +
ggh4x::facetted_pos_scales(
x = scales_x,
y = scales_y
)+
theme_icons()+
geom_point(aes(shape = Year, color = Year), size = 2)+
scale_color_manual(
values = c("2019" = "red", "2020" = "green", "2021" = "blue"),
drop = FALSE
) +
# Conditional replacement of 0/1 labels for Gender
{if (unique(plotting_dataset$vars) == 'Gender')
scale_x_continuous(
limits = c(-0.5, 1.5),  # Adjust the x limits to make it more centered
breaks = c(0, 1), # Place breaks at 0 and 1
labels = c("Females", "Males")
) } +
# Optional p-value text
{if(nrow(pvalues)!=0) geom_text(pvalues, mapping=aes(label=paste(rho, pvalues, sep= ",")),hjust =0, size = 3.5, fontface="italic", position = position_dodge(width = .1), check_overlap = FALSE)}
list1<-append(list(plt),list1, 0)
name1 <- paste(variable,"_plots_", tissues[h], sep = "")
list1names <- append(list1names,name1)
}
}else if(tissues[h]=='muscle'){
if(unique(plotting_dataset$vars)=='Latitude'){
plt <-plotting_dataset %>% ggplot(aes(Values, concentrations, colour = Year, group=Year)) +
geom_smooth(method=lm, se=FALSE)+
labs(title = paste(tools::toTitleCase(tissues[h]),variable,"Vs Concentrations mg/kg",sep =","),
y = "Concentration mg/kg", x = paste(variable))+
facet_wrap(vars(pollutants), labeller = as_labeller(icons_markdown), scales ="free", ncol=3, drop = TRUE) +
ggh4x::facetted_pos_scales(
x = scales_x,
y = scales_y
)+
theme_icons()+
geom_point(aes(shape = Year, color = Year), size = 2)+
scale_color_manual(
values = c("2019" = "red", "2020" = "green", "2021" = "blue"),
drop = FALSE
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),  # Rotate x-axis labels
plot.margin = margin(20, 20, 20, 20)  # Add margins to give labels more space
)+
{if(nrow(pvalues)!=0) geom_text(pvalues, mapping=aes(label=paste(rho, pvalues, sep= ",")),hjust =0, size = 3.5, fontface="italic", position = position_dodge(width = .1), check_overlap = FALSE)}
list2<-append(list(plt),list2, 0)
name2 <- paste(variable,"_plots_", tissues[h], sep = "")
list2names <- append(list2names,name2)
}else{
#print(str(plotting_dataset))
plt <-plotting_dataset %>% ggplot(aes(Values, concentrations, colour = Year, group=Year)) +
geom_smooth(method=lm, se=FALSE)+
labs(title = paste(tools::toTitleCase(tissues[h]),variable,"Vs Concentrations mg/kg",sep =" "),
y = "Concentration mg/kg", x = paste(variable))+
facet_wrap(vars(pollutants), labeller = as_labeller(icons_markdown), scales ="free", ncol=2, drop = TRUE) +
ggh4x::facetted_pos_scales(
x = scales_x,
y = scales_y
)+
theme_icons()+
geom_point(aes(shape = Year, color = Year), size = 2)+
scale_color_manual(
values = c("2019" = "red", "2020" = "green", "2021" = "blue"),
drop = FALSE
) +
# Conditional replacement of 0/1 labels for Gender
{if (unique(plotting_dataset$vars) == 'Gender')
scale_x_continuous(
limits = c(-0.5, 1.5),  # Adjust the x limits to make it more centered
breaks = c(0, 1), # Place breaks at 0 and 1
labels = c("Females", "Males")
) } +
# Optional p-value text
{if(nrow(pvalues)!=0) geom_text(pvalues, mapping=aes(label=paste(rho, pvalues, sep= ",")),hjust =0, size = 3.5, fontface="italic", position = position_dodge(width = .1), check_overlap = FALSE)}
list2<-append(list(plt),list2, 0)
name2 <- paste(variable,"_plots_", tissues[h], sep = "")
list2names <- append(list2names,name2)
}
}else{
if(unique(plotting_dataset$vars)=='Latitude'){
plt <-plotting_dataset %>% ggplot(aes(Values, concentrations, colour = Year, group=Year)) +
geom_smooth(method=lm, se=FALSE)+
labs(title = paste(tools::toTitleCase(tissues[h]),variable,"Vs Concentrations mg/kg",sep =" "),
y = "Concentration mg/kg", x = paste(variable))+
facet_wrap(vars(pollutants), labeller = as_labeller(icons_markdown), scales ="free", ncol=3, drop = TRUE) +
ggh4x::facetted_pos_scales(
x = scales_x,
y = scales_y
)+
theme_icons()+
geom_point(aes(shape = Year, color = Year), size = 2)+
scale_color_manual(
values = c("2019" = "red", "2020" = "green", "2021" = "blue"),
drop = FALSE
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),  # Rotate x-axis labels
plot.margin = margin(20, 20, 20, 20)  # Add margins to give labels more space
)+
geom_text(pvalues, mapping=aes(label=paste(rho, pvalues, sep = ",")),hjust =0, size = 3.5, fontface="italic", position = position_dodge(width = .1), check_overlap = FALSE)
list3<-append(list(plt),list3, 0)
name3 <- paste(variable,"_plots_", tissues[h], sep = "")
list3names <- append(list3names,name3)
}else{
#print(str(plotting_dataset))
plt <-plotting_dataset %>% ggplot(aes(Values, concentrations, colour = Year, group=Year)) +
geom_smooth(method=lm, se=FALSE)+
labs(title = paste(tools::toTitleCase(tissues[h]),variable,"Vs Concentrations mg/kg",sep =" "),
y = "Concentration mg/kg", x = paste(variable))+
facet_wrap(vars(pollutants), labeller = as_labeller(icons_markdown), scales ="free", ncol=3, drop = TRUE) +
ggh4x::facetted_pos_scales(
x = scales_x,
y = scales_y
)+
theme_icons()+
geom_point(aes(shape = Year, color = Year), size = 2)+
scale_color_manual(
values = c("2019" = "red", "2020" = "green", "2021" = "blue"),
drop = FALSE
) +
# Conditional replacement of 0/1 labels for Gender
{if (unique(plotting_dataset$vars) == 'Gender')
scale_x_continuous(
limits = c(-0.5, 1.5),  # Adjust the x limits to make it more centered
breaks = c(0, 1), # Place breaks at 0 and 1
labels = c("Females", "Males")
) } +
# Optional p-value text
{if(nrow(pvalues)!=0) geom_text(pvalues, mapping=aes(label=paste(rho, pvalues, sep= ",")),hjust =0, size = 3.5, fontface="italic", position = position_dodge(width = .1), check_overlap = FALSE)}
#stat_cor(method = "spearman", aes(label =paste(r.label, "pvalue",..p.., sep = "~")), position = position_dodge(width = .1), hjust=-0.7, size = 3.5)
#{if(variable=='dta_km|dtfl_km')scale_x_continuous(limits = c(min(long_dataset$Values), max(long_dataset$Values)))}+
# geom_text(pvalues, mapping=aes(label=paste(rho, pval, sep = ",")),hjust =-0.7, size = 3.5, fontface="italic", position = position_dodge(width = .1), check_overlap = FALSE)
list3<-append(list(plt),list3, 0)
name3 <- paste(variable,"_plots_", tissues[h], sep = "")
list3names <- append(list3names,name3)
}
}
names(list0)<-list0names
names(list1)<-list1names
names(list2)<-list2names
names(list3)<-list3names
names(list4)<-list4names
}
}
return(list (liver=list0, stomach=list1, muscle=list2, inksac=list3, final_coefficients_results=list4 ))
}
#Calling Main Function. All arguments except remove.zeroes (default is set at False) are required. Users can also remove all zeroes and focus on only the detected concentrations or keep them.The user also has to choose between datasets_for_organic_compounds or datasets_for_trace_metals.The results are saved in temporal_comparison_results_per_tissue.
tissue_wise_temporal_variable_analysis <- comparing_years_per_tissue_per_variable(datasets_for_trace_metals,remove.zeroes = FALSE)
View(datasets_for_organic_compounds)
View(datasets_for_Trace_metals)
datasets_for_trace_metals <- process_dataset(tracemetals_data, keep_LOQ_values = FALSE)
#Calling Main Function. All arguments except remove.zeroes (default is set at False) are required. Users can also remove all zeroes and focus on only the detected concentrations or keep them.The user also has to choose between datasets_for_organic_compounds or datasets_for_trace_metals.The results are saved in temporal_comparison_results_per_tissue.
tissue_wise_temporal_variable_analysis <- comparing_years_per_tissue_per_variable(datasets_for_trace_metals,remove.zeroes = FALSE)
#Calling Main Function. All arguments except remove.zeroes (default is set at False) are required. Users can also remove all zeroes and focus on only the detected concentrations or keep them.The user also has to choose between datasets_for_organic_compounds or datasets_for_trace_metals.The results are saved in temporal_comparison_results_per_tissue.
tissue_wise_temporal_variable_analysis <- comparing_years_per_tissue_per_variable(datasets_for_trace_metals,remove.zeroes = FALSE)
View(tissue_wise_temporal_variable_analysis)
tissue_wise_temporal_variable_analysis[["liver"]]
tissue_wise_temporal_variable_analysis[["stomach"]]
tissue_wise_temporal_variable_analysis[["muscle"]]
tissue_wise_temporal_variable_analysis[["inksac"]]
#Calling save_graphs function:
save_graphs(tissue_wise_temporal_variable_analysis)
#Below code saves multiple plots into individual PNG files. It loops through the list of plots and and for each plot it extracts the tissue name, and the plots for that tissue then saves them in their respective tissue folders.
save_graphs <- function(graph_list) {
# Extract pollutant types from the first available plot
plot_obj <- graph_list[["liver"]][[1]]
plot_data <- plot_obj$data
pollutant_types <- unique(plot_data$pollutants)
tissues <- c('liver', 'stomach', 'muscle', 'inksac')  # Define order of tissues
# Iterate through tissues in the specified order
for (tissue_name in tissues) {
# Check if the tissue exists in the graph list
if (!(tissue_name %in% names(graph_list))) {
next  # Skip if the tissue does not have any plots
}
# Define the folder where you want to save the PNG files for each tissue
if (any(grepl("Metal", pollutant_types))) {
output_folder <- file.path("/Users/mrnobody/Documents/GitHub/Squid_Fest/Squid_Concentration_Analysis/3-Data_Mining/Data_mining_plots/tissue-wise_temporal_variable_analysis/Trace_metals", tissue_name)
} else {
output_folder <- file.path("/Users/mrnobody/Documents/GitHub/Squid_Fest/Squid_Concentration_Analysis/3-Data_Mining/Data_mining_plots/tissue-wise_temporal_variable_analysis/Organic_compounds", tissue_name)
}
# Create the output folder if it doesn't exist
if (!dir.exists(output_folder)) dir.create(output_folder, recursive = TRUE)
tissue_sublist <- graph_list[[tissue_name]]
# Loop through each plot for the current tissue
for (i in seq_along(tissue_sublist)) {
plot_name <- names(tissue_sublist)[i]
plot_object <- tissue_sublist[[i]]
cat("\n----------\n")
cat("Checking:", tissue_name, "_", plot_name, "\n")
# Construct output path for each plot
output_path <- file.path(output_folder, paste0(tissue_name, "_", plot_name, ".png"))
# Ensure any open devices are closed before starting new plot saving
if (!is.null(dev.list())) {
dev.off()  # Close all open devices
}
# Try saving the plot
tryCatch({
png(output_path, width = 1400, height = 800)
grid::grid.draw(ggplotGrob(plot_object))
cat("Saved:", output_path, "\n")
dev.off()  # Ensure device is closed
}, error = function(e) {
cat("⚠️ Error in", plot_name, ":", e$message, "\n")
if (!is.null(dev.list()) && length(dev.list()) > 0) dev.off()  # Force-close if error left device open
})
}
}
}
#Calling save_graphs function:
save_graphs(tissue_wise_temporal_variable_analysis)
#Calling Main Function. All arguments except remove.zeroes (default is set at False) are required. Users can also remove all zeroes and focus on only the detected concentrations or keep them.The user also has to choose between datasets_for_organic_compounds or datasets_for_trace_metals.The results are saved in temporal_comparison_results_per_tissue.
tissue_wise_temporal_variable_analysis <- comparing_years_per_tissue_per_variable(datasets_for_organic_compounds,remove.zeroes = FALSE)
#Calling save_graphs function:
save_graphs(tissue_wise_temporal_variable_analysis)
