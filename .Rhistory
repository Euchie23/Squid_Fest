mutate(across(everything(), as.numeric))
# Run PCA
pca_all <- PCA(pca_input, graph = FALSE)
# K-means on first 2 PCs
kmeans_result <- kmeans(pca_all$ind$coord[, 1:2], centers = 3)
data_tissue$Cluster <- as.factor(kmeans_result$cluster)
# Combine with metadata if available
if (!is.null(metadata)) {
data_tissue <- left_join(data_tissue, metadata, by =  c("ID_num", "Area", "Tissue", "Year"))
}
# PCA biplot and cluster plot
biplot_all <- fviz_pca_biplot(pca_all, col.ind = data_tissue$Cluster, label = "var",
addEllipses = TRUE, repel = TRUE,
col.var = "black", palette = "jco",
title = paste("PCA Biplot -", tissue, "(All Years)"))
cluster_plot <- fviz_pca_ind(pca_all, geom.ind = "point", pointshape = 21,
fill.ind = data_tissue$Cluster, col.ind = "black",
addEllipses = TRUE, ellipse.type = "norm",
palette = "jco",
title = paste("K-means Clustering -", tissue))
# Long format for pollutant boxplots
cluster_long <- data_tissue %>%
select(Cluster, all_of(pollutant_vars)) %>%
pivot_longer(-Cluster, names_to = "variable", values_to = "value")
boxplot <- ggplot(cluster_long, aes(x = Cluster, y = value, fill = Cluster)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.2, alpha = 0.5, size = 0.7) +  # Jitter to show data points
facet_wrap(~ variable, scales = "free_y", ncol = 3) +
labs(title = paste("Pollutant Distributions by Cluster -", tissue)) +
theme_minimal() + scale_fill_brewer(palette = "Set1")
# Save final combined plot
png(file.path(tissue_folder, paste0(tissue, "_PCA_KMeans_Boxplot.png")), width = 2400, height = 900)
grid.arrange(biplot_all, cluster_plot, boxplot, ncol = 1)
dev.off()
# Kruskal-Wallis Test for each metadata variable
if (!is.null(metadata)) {
metadata_vars <- colnames(metadata)[!colnames(metadata) %in% c("ID_num")]
cat("\nKruskal-Wallis Results -", tissue, "\n")
for (var in metadata_vars) {
if (is.numeric(data_tissue[[var]]) || is.integer(data_tissue[[var]])) {
result <- kruskal.test(data_tissue[[var]] ~ data_tissue$Cluster)
cat(var, ": p-value =", result$p.value, "\n")
}
}
}
}
}
# Run the function (example)
pca_kmeans_cluster_explorer(datasets_for_trace_metals, remove.vars = TRUE)
# Run the function (example)
pca_kmeans_cluster_explorer(datasets_for_trace_metals, remove.vars = TRUE)
install.packages(GGally)
install.packages('GGally')
install.packages('fs')
install.packages('pheatmap')
setwd("/Users/mrnobody/Documents/GitHub/Squid_Fest")
tm_data <- datasets_for_trace_metals$$dataset_with_numerical_values)
tm_data <- datasets_for_trace_metals$$dataset_with_numerical_values)
tm_data <- datasets_for_trace_metals$dataset_with_numerical_values)
tm_data <- datasets_for_trace_metals$dataset_with_numerical_values
oc_data <- datasets_for_organic_compounds$dataset_with_numerical_values[,c(3:6, 16:19)]
View(oc_data)
combined_data <- left_join(
tm_wide,
oc_wide,
by = c("Year", "ID_num", "Area", "Tissue")  # Optional: to distinguish same-named columns
)
combined_data <- left_join(
tm_data,
oc_data,
by = c("Year", "ID_num", "Area", "Tissue")  # Optional: to distinguish same-named columns
)
head(combined_data)
View(combined_data)
View(oc_data)
View(tm_data)
explore_pollutant_interactions <- function(df, metal_cols, organic_cols) {
# 🧫 Define unique tissues in your data
tissues <- unique(df$Tissue)
for (tissue in tissues) {
# 📁 Set path where results will be saved
output_folder <- file.path(
"Squid_Concentration_Analysis/3-Data_Mining/Data_mining_plots/pollutant_interactions/", tissue
)
# 📁 Create output folder if it doesn't exist
dir_create(output_folder)
df_tissue <- df %>% filter(Tissue == tissue)
# 🎯 Focus on numeric pollutant data
df_focus <- df_tissue %>% select(all_of(c(metal_cols, organic_cols))) %>%
select(where(is.numeric))
if (nrow(df_focus) < 2 || ncol(df_focus) < 2) {
cat("⚠️ Skipping tissue", tissue, "- not enough data.\n")
next
}
# 🔥 Correlation heatmap
cor_matrix_focus <- cor(df_focus, use = "pairwise.complete.obs")
heatmap_path <- file.path(output_folder, paste0("heatmap_", tissue, ".png"))
pheatmap(cor_matrix_focus,
cluster_rows = TRUE,
cluster_cols = TRUE,
display_numbers = TRUE,
fontsize_number = 8,
main = paste("Correlation in", tissue),
filename = heatmap_path)
cat("✅ Heatmap saved for", tissue, "→", heatmap_path, "\n")
# 📊 Scatterplot matrix
scatterplot_path <- file.path(output_folder, paste0("scatterplot_", tissue, ".pdf"))
pdf(scatterplot_path, width = 10, height = 10)
ggpairs(df_focus, title = paste("Scatterplot Matrix -", tissue))
dev.off()
cat("✅ Scatterplot matrix saved for", tissue, "→", scatterplot_path, "\n")
}
}
explore_pollutant_interactions(combined_data, metal_cols, organic_cols)
#LOADING LIBRARIES----
library(dplyr) # for data manipulation
library(fs) #for providing a modern, consistent, and cross-platform interface for working with the file system (e.g., creating, deleting, or navigating files and folders)
library(GGally) # for creating easy, multi-variable correlation and scatterplot matrices.
library(ggplot2) # for  data visualization
library(gridExtra) # for multiple ggplot2 plots to be arranged in a grid layout for combined display or export.
library(pheatmap) # for creating customizable heatmaps with clustering and annotations.
library(reshape2)  #  for transforming data between wide and long formats for easier analysis and visualization.
metal_cols <- c("Metal_A", "Metal_B", "Metal_C","Metal_D", "Metal_E", "Metal_F","Metal_G", "Metal_H", "Metal_I", "Metal_J")          # Replace with your actual column names
organic_cols <- c("Organic_A","Organic_B","Organic_C","Organic_D")
explore_pollutant_interactions(combined_data, metal_cols, organic_cols)
explore_pollutant_interactions <- function(df, metal_cols, organic_cols) {
# 🧫 Define unique tissues in your data
tissues <- unique(df$Tissue)
for (tissue in tissues) {
# 📁 Set path where results will be saved
output_folder <- file.path(
"Squid_Concentration_Analysis/3-Data_Mining/Data_mining_plots/pollutant_interactions/", tissue
)
# 📁 Create output folder if it doesn't exist
dir_create(output_folder)
df_tissue <- df %>% filter(Tissue == tissue)
print(df_tissue)
# 🎯 Focus on numeric pollutant data
df_focus <- df_tissue %>% select(all_of(c(metal_cols, organic_cols))) %>%
select(where(is.numeric))
if (nrow(df_focus) < 2 || ncol(df_focus) < 2) {
cat("⚠️ Skipping tissue", tissue, "- not enough data.\n")
next
}
# 🔥 Correlation heatmap
cor_matrix_focus <- cor(df_focus, use = "pairwise.complete.obs")
heatmap_path <- file.path(output_folder, paste0("heatmap_", tissue, ".png"))
pheatmap(cor_matrix_focus,
cluster_rows = TRUE,
cluster_cols = TRUE,
display_numbers = TRUE,
fontsize_number = 8,
main = paste("Correlation in", tissue),
filename = heatmap_path)
cat("✅ Heatmap saved for", tissue, "→", heatmap_path, "\n")
# 📊 Scatterplot matrix
scatterplot_path <- file.path(output_folder, paste0("scatterplot_", tissue, ".pdf"))
pdf(scatterplot_path, width = 10, height = 10)
ggpairs(df_focus, title = paste("Scatterplot Matrix -", tissue))
dev.off()
cat("✅ Scatterplot matrix saved for", tissue, "→", scatterplot_path, "\n")
}
}
explore_pollutant_interactions(combined_data, metal_cols, organic_cols)
explore_pollutant_interactions <- function(df, metal_cols, organic_cols) {
# 🧫 Define unique tissues in your data
tissues <- unique(df$Tissue)
for (tissue in tissues) {
# 📁 Set path where results will be saved
output_folder <- file.path(
"Squid_Concentration_Analysis/3-Data_Mining/Data_mining_plots/pollutant_interactions/", tissue
)
# 📁 Create output folder if it doesn't exist
dir_create(output_folder)
df_tissue <- df %>% filter(Tissue == tissue)
print(str(df_tissue))
# 🎯 Focus on numeric pollutant data
df_focus <- df_tissue %>% select(all_of(c(metal_cols, organic_cols))) %>%
select(where(is.numeric))
if (nrow(df_focus) < 2 || ncol(df_focus) < 2) {
cat("⚠️ Skipping tissue", tissue, "- not enough data.\n")
next
}
# 🔥 Correlation heatmap
cor_matrix_focus <- cor(df_focus, use = "pairwise.complete.obs")
heatmap_path <- file.path(output_folder, paste0("heatmap_", tissue, ".png"))
pheatmap(cor_matrix_focus,
cluster_rows = TRUE,
cluster_cols = TRUE,
display_numbers = TRUE,
fontsize_number = 8,
main = paste("Correlation in", tissue),
filename = heatmap_path)
cat("✅ Heatmap saved for", tissue, "→", heatmap_path, "\n")
# 📊 Scatterplot matrix
scatterplot_path <- file.path(output_folder, paste0("scatterplot_", tissue, ".pdf"))
pdf(scatterplot_path, width = 10, height = 10)
ggpairs(df_focus, title = paste("Scatterplot Matrix -", tissue))
dev.off()
cat("✅ Scatterplot matrix saved for", tissue, "→", scatterplot_path, "\n")
}
}
explore_pollutant_interactions(combined_data, metal_cols, organic_cols)
explore_pollutant_interactions <- function(df, metal_cols, organic_cols) {
#Changing metadata colums from dataset into numeric or factor
df[,c(16:29)] =as.numeric(unlist(df[,c(16:29)]))
# 🧫 Define unique tissues in your data
tissues <- unique(df$Tissue)
for (tissue in tissues) {
# 📁 Set path where results will be saved
output_folder <- file.path(
"Squid_Concentration_Analysis/3-Data_Mining/Data_mining_plots/pollutant_interactions/", tissue
)
# 📁 Create output folder if it doesn't exist
dir_create(output_folder)
df_tissue <- df %>% filter(Tissue == tissue)
print(str(df_tissue))
# 🎯 Focus on numeric pollutant data
df_focus <- df_tissue %>% select(all_of(c(metal_cols, organic_cols))) %>%
select(where(is.numeric))
if (nrow(df_focus) < 2 || ncol(df_focus) < 2) {
cat("⚠️ Skipping tissue", tissue, "- not enough data.\n")
next
}
# 🔥 Correlation heatmap
cor_matrix_focus <- cor(df_focus, use = "pairwise.complete.obs")
heatmap_path <- file.path(output_folder, paste0("heatmap_", tissue, ".png"))
pheatmap(cor_matrix_focus,
cluster_rows = TRUE,
cluster_cols = TRUE,
display_numbers = TRUE,
fontsize_number = 8,
main = paste("Correlation in", tissue),
filename = heatmap_path)
cat("✅ Heatmap saved for", tissue, "→", heatmap_path, "\n")
# 📊 Scatterplot matrix
scatterplot_path <- file.path(output_folder, paste0("scatterplot_", tissue, ".pdf"))
pdf(scatterplot_path, width = 10, height = 10)
ggpairs(df_focus, title = paste("Scatterplot Matrix -", tissue))
dev.off()
cat("✅ Scatterplot matrix saved for", tissue, "→", scatterplot_path, "\n")
}
}
explore_pollutant_interactions(combined_data, metal_cols, organic_cols)
debug(explore_pollutant_interactions)
#Changing concentration colums from dataset into numeric or factor
df[,c(16:29)] =as.numeric(unlist(df[,c(16:29)]))
explore_pollutant_interactions(combined_data, metal_cols, organic_cols)
undebug(explore_pollutant_interactions)
explore_pollutant_interactions <- function(df, metal_cols, organic_cols) {
#Changing concentration colums from dataset into numeric or factor
df[,c(16:29)] =as.numeric(unlist(df[,c(16:29)]))
# 🧫 Define unique tissues in your data
tissues <- unique(df$Tissue)
for (tissue in tissues) {
# 📁 Set path where results will be saved
output_folder <- file.path(
"Squid_Concentration_Analysis/3-Data_Mining/Data_mining_plots/pollutant_interactions/", tissue
)
# 📁 Create output folder if it doesn't exist
dir_create(output_folder)
df_tissue <- df %>% filter(Tissue == tissue)
print(str(df_tissue))
# 🎯 Focus on numeric pollutant data
df_focus <- df_tissue %>% select(all_of(c(metal_cols, organic_cols))) %>%
select(where(is.numeric))
# Set threshold
min_nonzero_prop <- 0.10
#Compute the proportion of non-zero values for each column
nonzero_prop <- colMeans(df_focus != 0, na.rm = TRUE)
# Filter columns to keep only those with ≥ 10% non-zero values
df_focus <- df_focus[, nonzero_prop >= min_nonzero_prop]
if (nrow(df_focus) < 2 || ncol(df_focus) < 2) {
cat("⚠️ Skipping tissue", tissue, "- not enough data.\n")
next
}
# 🔥 Correlation heatmap
cor_matrix_focus <- cor(df_focus, use = "pairwise.complete.obs")
heatmap_path <- file.path(output_folder, paste0("heatmap_", tissue, ".png"))
pheatmap(cor_matrix_focus,
cluster_rows = TRUE,
cluster_cols = TRUE,
display_numbers = TRUE,
fontsize_number = 8,
main = paste("Correlation in", tissue),
filename = heatmap_path)
cat("✅ Heatmap saved for", tissue, "→", heatmap_path, "\n")
# 📊 Scatterplot matrix
scatterplot_path <- file.path(output_folder, paste0("scatterplot_", tissue, ".pdf"))
pdf(scatterplot_path, width = 10, height = 10)
ggpairs(df_focus, title = paste("Scatterplot Matrix -", tissue))
dev.off()
cat("✅ Scatterplot matrix saved for", tissue, "→", scatterplot_path, "\n")
}
}
explore_pollutant_interactions(combined_data, metal_cols, organic_cols)
explore_pollutant_interactions <- function(df, metal_cols, organic_cols) {
#Changing concentration colums from dataset into numeric or factor
df[,c(16:29)] =as.numeric(unlist(df[,c(16:29)]))
# 🧫 Define unique tissues in your data
tissues <- unique(df$Tissue)
for (tissue in tissues) {
# 📁 Set path where results will be saved
output_folder <- file.path(
"Squid_Concentration_Analysis/3-Data_Mining/Data_mining_plots/pollutant_interactions/", tissue
)
# 📁 Create output folder if it doesn't exist
dir_create(output_folder)
df_tissue <- df %>% filter(Tissue == tissue)
# 🎯 Focus on numeric pollutant data
df_focus <- df_tissue %>% select(all_of(c(metal_cols, organic_cols))) %>%
select(where(is.numeric))
# Set threshold
min_nonzero_prop <- 0.10
#Compute the proportion of non-zero values for each column
nonzero_prop <- colMeans(df_focus != 0, na.rm = TRUE)
# Filter columns to keep only those with ≥ 10% non-zero values
df_focus <- df_focus[, nonzero_prop >= min_nonzero_prop]
if (nrow(df_focus) < 2 || ncol(df_focus) < 2) {
cat("⚠️ Skipping tissue", tissue, "- not enough data.\n")
next
}
# 🔥 Correlation heatmap
cor_matrix_focus <- cor(df_focus, use = "pairwise.complete.obs")
heatmap_path <- file.path(output_folder, paste0("heatmap_", tissue, ".png"))
pheatmap(cor_matrix_focus,
cluster_rows = TRUE,
cluster_cols = TRUE,
display_numbers = TRUE,
fontsize_number = 8,
main = paste("Correlation in", tissue),
filename = heatmap_path)
cat("✅ Heatmap saved for", tissue, "→", heatmap_path, "\n")
# 📊 Scatterplot matrix
scatterplot_path <- file.path(output_folder, paste0("scatterplot_", tissue, ".pdf"))
pdf(scatterplot_path, width = 10, height = 10)
ggpairs(df_focus, title = paste("Scatterplot Matrix -", tissue))
dev.off()
cat("✅ Scatterplot matrix saved for", tissue, "→", scatterplot_path, "\n")
}
}
explore_pollutant_interactions <- function(df, metal_cols, organic_cols) {
#Changing concentration colums from dataset into numeric or factor
df[,c(16:29)] =as.numeric(unlist(df[,c(16:29)]))
# Desired tissue order
tissue_order <- c("liver", "stomach", "muscle", "inksac")
# Convert to factor to enforce order
df$Tissue <- factor(df$Tissue, levels = tissue_order)
# Extract the ordered levels (ensures you're looping in that specific order)
tissues <- levels(df$Tissue))
explore_pollutant_interactions <- function(df, metal_cols, organic_cols) {
#Changing concentration colums from dataset into numeric or factor
df[,c(16:29)] =as.numeric(unlist(df[,c(16:29)]))
# Desired tissue order
tissue_order <- c("liver", "stomach", "muscle", "inksac")
# Convert to factor to enforce order
df$Tissue <- factor(df$Tissue, levels = tissue_order)
# Extract the ordered levels (ensures you're looping in that specific order)
tissues <- levels(df$Tissue)
for (tissue in tissues) {
# 📁 Set path where results will be saved
output_folder <- file.path(
"Squid_Concentration_Analysis/3-Data_Mining/Data_mining_plots/pollutant_interactions/", tissue
)
# 📁 Create output folder if it doesn't exist
dir_create(output_folder)
df_tissue <- df %>% filter(Tissue == tissue)
# 🎯 Focus on numeric pollutant data
df_focus <- df_tissue %>% select(all_of(c(metal_cols, organic_cols))) %>%
select(where(is.numeric))
# Set threshold
min_nonzero_prop <- 0.10
#Compute the proportion of non-zero values for each column
nonzero_prop <- colMeans(df_focus != 0, na.rm = TRUE)
# Filter columns to keep only those with ≥ 10% non-zero values
df_focus <- df_focus[, nonzero_prop >= min_nonzero_prop]
if (nrow(df_focus) < 2 || ncol(df_focus) < 2) {
cat("⚠️ Skipping tissue", tissue, "- not enough data.\n")
next
}
# 🔥 Correlation heatmap
cor_matrix_focus <- cor(df_focus, use = "pairwise.complete.obs")
heatmap_path <- file.path(output_folder, paste0("heatmap_", tissue, ".png"))
pheatmap(cor_matrix_focus,
cluster_rows = TRUE,
cluster_cols = TRUE,
display_numbers = TRUE,
fontsize_number = 8,
main = paste("Correlation in", tissue),
filename = heatmap_path)
cat("✅ Heatmap saved for", tissue, "→", heatmap_path, "\n")
# 📊 Scatterplot matrix
scatterplot_path <- file.path(output_folder, paste0("scatterplot_", tissue, ".pdf"))
pdf(scatterplot_path, width = 10, height = 10)
ggpairs(df_focus, title = paste("Scatterplot Matrix -", tissue))
dev.off()
cat("✅ Scatterplot matrix saved for", tissue, "→", scatterplot_path, "\n")
}
}
explore_pollutant_interactions(combined_data, metal_cols, organic_cols)
explore_pollutant_interactions(combined_data, metal_cols, organic_cols)
explore_pollutant_interactions <- function(df, metal_cols, organic_cols) {
#Changing concentration colums from dataset into numeric or factor
df[,c(16:29)] =as.numeric(unlist(df[,c(16:29)]))
# Desired tissue order
tissue_order <- c("liver", "stomach", "muscle", "inksac")
# Convert to factor to enforce order
df$Tissue <- factor(df$Tissue, levels = tissue_order)
# Extract the ordered levels (ensures you're looping in that specific order)
tissues <- levels(df$Tissue)
for (tissue in tissues) {
# 📁 Set path where results will be saved
output_folder <- file.path(
"Squid_Concentration_Analysis/3-Data_Mining/Data_mining_plots/pollutant_interactions/", tissue
)
# 📁 Create output folder if it doesn't exist
dir_create(output_folder)
df_tissue <- df %>% filter(Tissue == tissue)
# 🎯 Focus on numeric pollutant data
df_focus <- df_tissue %>% select(all_of(c(metal_cols, organic_cols))) %>%
select(where(is.numeric))
# Set threshold
min_nonzero_prop <- 0.10
#Compute the proportion of non-zero values for each column
nonzero_prop <- colMeans(df_focus != 0, na.rm = TRUE)
print(nonzero_prop)
# Filter columns to keep only those with ≥ 10% non-zero values
df_focus <- df_focus[, nonzero_prop >= min_nonzero_prop]
if (nrow(df_focus) < 2 || ncol(df_focus) < 2) {
cat("⚠️ Skipping tissue", tissue, "- not enough data.\n")
next
}
# 🔥 Correlation heatmap
cor_matrix_focus <- cor(df_focus, use = "pairwise.complete.obs")
heatmap_path <- file.path(output_folder, paste0("heatmap_", tissue, ".png"))
pheatmap(cor_matrix_focus,
cluster_rows = TRUE,
cluster_cols = TRUE,
display_numbers = TRUE,
fontsize_number = 8,
main = paste("Correlation in", tissue),
filename = heatmap_path)
cat("✅ Heatmap saved for", tissue, "→", heatmap_path, "\n")
# 📊 Scatterplot matrix
scatterplot_path <- file.path(output_folder, paste0("scatterplot_", tissue, ".pdf"))
pdf(scatterplot_path, width = 10, height = 10)
ggpairs(df_focus, title = paste("Scatterplot Matrix -", tissue))
dev.off()
cat("✅ Scatterplot matrix saved for", tissue, "→", scatterplot_path, "\n")
}
}
explore_pollutant_interactions(combined_data, metal_cols, organic_cols)
df_liver <- df %>% filter(Tissue == "liver")
df_focus <- df_liver %>% select(all_of(c(metal_cols, organic_cols))) %>%
select(where(is.numeric))
df_liver <- combined_data %>% filter(Tissue == "liver")
df_focus <- df_liver %>% select(all_of(c(metal_cols, organic_cols))) %>%
select(where(is.numeric))
# Check how many valid columns are left
nonzero_prop <- colMeans(df_focus != 0, na.rm = TRUE)
df_focus <- df_focus[, nonzero_prop >= 0.10]
# Check dimensions before plotting
print(dim(df_focus))  # e.g. 20 rows x 4 columns
ggpairs(df_focus, title = "Scatterplot Matrix - liver")
df_liver <- combined_data %>% filter(Tissue == "liver")
df_focus <- df_liver %>% select(all_of(c(metal_cols, organic_cols))) %>%
select(where(is.numeric))
# Check how many valid columns are left
nonzero_prop <- colMeans(df_focus != 0, na.rm = TRUE)
df_focus <- df_focus[, nonzero_prop >= 0.10]
# Check dimensions before plotting
print(dim(df_focus))  # e.g. 20 rows x 4 columns
ggpairs(df_focus, title = "Scatterplot Matrix - liver")
combined_data[,c(16:29)] =as.numeric(unlist(combined_data[,c(16:29)]))
df_liver <- combined_data %>% filter(Tissue == "liver")
df_focus <- df_liver %>% select(all_of(c(metal_cols, organic_cols))) %>%
select(where(is.numeric))
# Check how many valid columns are left
nonzero_prop <- colMeans(df_focus != 0, na.rm = TRUE)
df_focus <- df_focus[, nonzero_prop >= 0.10]
# Check dimensions before plotting
print(dim(df_focus))  # e.g. 20 rows x 4 columns
ggpairs(df_focus, title = "Scatterplot Matrix - liver")
ggpairs(df_focus, title = "Scatterplot Matrix - liver")
combined_data[,c(16:29)] =as.numeric(unlist(combined_data[,c(16:29)]))
df_liver <- combined_data %>% filter(Tissue == "liver")
df_focus <- df_liver %>% select(all_of(c(metal_cols, organic_cols))) %>%
select(where(is.numeric))
# Check how many valid columns are left
nonzero_prop <- colMeans(df_focus != 0, na.rm = TRUE)
df_focus <- df_focus[, nonzero_prop >= 0.10]
if (ncol(df_focus) < 2) {
cat("⚠️ Not enough variables to generate a scatterplot for", tissue, "\n")
next
}
# Check dimensions before plotting
print(dim(df_focus))  # e.g. 20 rows x 4 columns
combined_data[,c(16:29)] =as.numeric(unlist(combined_data[,c(16:29)]))
df_liver <- combined_data %>% filter(Tissue == "liver")
df_focus <- df_liver %>% select(all_of(c(metal_cols, organic_cols))) %>%
select(where(is.numeric))
# Check how many valid columns are left
nonzero_prop <- colMeans(df_focus != 0, na.rm = TRUE)
df_focus <- df_focus[, nonzero_prop >= 0.10]
if (ncol(df_focus) < 2) {
cat("⚠️ Not enough variables to generate a scatterplot for", tissue, "\n")
next
}
print(str(df_focus))
# Check dimensions before plotting
print(dim(df_focus))  # e.g. 20 rows x 4 columns
ggpairs(iris[, 1:4])
