} #Tissue
#Accumulating the outlier_detection_using_numerical_values dataset for a final dataset for all tissues
full_dataset_for_outlier_detection_using_numerical_values <- rbind(full_dataset_for_outlier_detection_using_numerical_values, outlier_detection_using_numerical_values)
}# pollutants
summarized_categorical_values_full <- rbind(summarized_categorical_values_full,summarized_categorical_values_2_accumulated)
summarized_categorical_values_yearly_total <- data.frame(matrix(ncol=8, nrow = 0), check.names = FALSE)
colnames(summarized_categorical_values_yearly_total)<-c('year', 'pollutant', 'Tissue', 'Total_N',classification_categories, 'Outliers')
#summarizing datasets based on the count of each classification category using the long_dataset_with_categorical_values_per_year for the yearly categorical values
summarized_categorical_values_yearly_total[1,1] <- year
summarized_categorical_values_yearly_total[1,2] <- 'Total'
summarized_categorical_values_yearly_total[1,3] <- 'Total'
summarized_categorical_values_yearly_total[1,4] <- nrow(long_dataset_with_categorical_values_per_year)
summarized_categorical_values_yearly_total[1,5] <- sum(str_count(long_dataset_with_categorical_values_per_year$status,category1))
summarized_categorical_values_yearly_total[1,6] <- sum(str_count(long_dataset_with_categorical_values_per_year$status,fixed(category2)))
summarized_categorical_values_yearly_total[1,7] <- sum(str_count(long_dataset_with_categorical_values_per_year$status,category3))
summarized_categorical_values_yearly_total[1,8] <- sum(as.numeric(summarized_categorical_values_full$Outliers))
#print(long_dataset_with_categorical_values_per_year)
#Accumulating the summarized_categorical_values_yearly_total for each year into one dataset.
summarized_categorical_values_full <- rbind(summarized_categorical_values_full, summarized_categorical_values_yearly_total)
} #years
summarized_categorical_values_full1 <- summarized_categorical_values_full
#print(summarized_categorical_values_full%>%filter(year == 2021))
#print(summarized_categorical_values_full1%>%filter(year == 2021))
for(row in 1:nrow(summarized_categorical_values_full1)) {
summarized_categorical_values_full1[row,'Detected'] <- summarized_categorical_values_full1[row,'Detected']-summarized_categorical_values_full1[row,'Outliers']
}
status_levels<- status_levels
final_dataset_categorical_values<- summarized_categorical_values_full1 %>% pivot_longer(all_of(status_levels), names_to = "status", values_to = "values")
if(distribution_using == 'Tissues'){
final_dataset_for_plotting <- final_dataset_categorical_values %>%group_by(status, Tissue,pollutant, year) %>%mutate(Percentage = (values/Total_N)* 100) #correct (status, Tissue,pollutant, year)
}else if (distribution_using == 'Pollutants') {
final_dataset_for_plotting <- final_dataset_categorical_values %>%
filter(!(Tissue == "inksac" & year == 2019)) %>%  # Remove rows with inksacs and 2019
group_by(status,pollutant, year) %>%
mutate(Percentage = (values / Total_N) * 100)
# print("fdcv")
# print(final_dataset_categorical_values %>% filter(pollutant == 'Hg'& year == 2021))
# print('fdfp')
# print(final_dataset_for_plotting %>% filter(pollutant == 'Hg'& year == 2021))
}else{
stop("Please enter either 'Tissues' or 'Pollutants' for 'distribution_using' to view data distribution")
}
final_dataset_for_plotting[is.na(final_dataset_for_plotting) | final_dataset_for_plotting < 0] = 0
#final_dataset_for_plotting[is.na(final_dataset_for_plotting)] = 0
# print('Below are the final results from summarizing_and_subsetting_datasets function')
# print('This dataset is called summarized_categorical_values_full')
# print(summarized_categorical_values_full)
# print('This dataset is called outlier_detection_using_numerical_value')
# print(outlier_detection_using_numerical_values)
# print('This dataset is called final_dataset_for_plotting')
# print(as.data.frame(final_dataset_for_plotting))
return(list (summarized_categorical_values_full=summarized_categorical_values_full, full_dataset_for_outlier_detection_using_numerical_values=full_dataset_for_outlier_detection_using_numerical_values,input_dataset_numerical_values=input_dataset_numerical_values, final_dataset_for_plotting=final_dataset_for_plotting))
}
final_list <- data_distribution(datasets_for_heavy_metals_data_distribution, keep_outliers=TRUE, distribution_using = 'Pollutants')
View(datasets_for_heavy_metals_data_distribution)
View(datasets_for_heavy_metals_data_distribution[["dataset_with_numerical_values"]])
#This function iterates uses the data_list input and subsets both the numerical and categoral datasets per year, pollutant and tissue for detailed processing of data distribution which includes summarizing the data per year, tissue and pollutant to find out which and how many of the concentration values using the classification categories (detected, below limit of quantification (BLOQ) and below limit of detection (BLOD) and Below blank control (BB)). In addition it uses the outliercheck function to detect and summarize the number of outliers in each subsetted dataset and returns summarized dataframes showing the detected outlier values and final datasets where the outliers are removed or not based on the users preference. It also returns the summarized categorical dataset showing the number of values for each category per year, pollutant and tissue.
summarizing_and_subsetting_datasets <- function (x, y, classification_categories, status_levels, column_range, distribution_using){
#LOADING INPUT DATASETS
#Loading datasets from lists to be subsetted later for data distribution processing
Subset_of_dataset_with_numerical_values <- x[,c(column_range,1,3,6)]
Subset_of_dataset_with_categorical_values <- y[,c(column_range,1,3,6)]
input_dataset_numerical_values<-x #saving the dataset_with_numerical_values as the input dataset for outliercheck and fiinal_dataset creation
#print(input_dataset_numerical_values)
#loading classification categories
{if(!is.na(classification_categories[1]))category1<-(classification_categories[1])}
{if(!is.na(classification_categories[2]))category2<-(classification_categories[2])}
{if(!is.na(classification_categories[3]))category3<-(classification_categories[3])}
#HOUSEKEEPING BEFORE PROCESSING
#Getting column names from datasets
column_names <- colnames(input_dataset_numerical_values)[column_range]
#arranging tissues into a vector specifically to rank them accoriding to toxicity (from tissue with highest toxicity to lowest)
tissues <- c('liver', 'stomach', 'muscle', 'inksac')
#Saving years as levels for for loop
years <- levels(factor(input_dataset_numerical_values[,3]))
#Changing loaded datasets to long format for further processing
long_dataset_with_categorical_values <- Subset_of_dataset_with_categorical_values %>% pivot_longer(all_of(column_names), names_to = "pollutant", values_to = "status")
long_dataset_with_numerical_values_no_zero <- Subset_of_dataset_with_numerical_values %>% pivot_longer(all_of(column_names), names_to = "pollutant", values_to = "concentration")%>%subset(concentration !=0)
# long_dataset_with_numerical_values_with_zero <- Subset_of_dataset_with_numerical_values %>% pivot_longer(all_of(column_names), names_to = "pollutant", values_to = "concentration")
#CREATING EMPTY DATAFRAMES
#Empty dataframe to store the accumulated yearly total for the categorical values to be visualized later
summarized_categorical_values_full <- data.frame(matrix(ncol=8, nrow = 0), check.names = FALSE)
colnames(summarized_categorical_values_full)<-c('year', 'pollutant', 'Tissue', 'Total_N', classification_categories, 'Outliers')
#Empty dataset for outlier detection using numerical dataset
full_dataset_for_outlier_detection_using_numerical_values <- data.frame(matrix(ncol=5, nrow = 0), check.names = FALSE)
colnames(full_dataset_for_outlier_detection_using_numerical_values)<-c('year','Tissue', 'pollutant', 'concentration', 'outlier')
#Empty dataset for outlier count.
summarized_categorical_values_1 <- data.frame(matrix(ncol=8, nrow = 0), check.names = FALSE)
colnames(summarized_categorical_values_1)<-c('year', 'pollutant', 'Tissue', 'Total_N', classification_categories, 'Outliers')
#Empty dataset for accumulated input dataset.
full_input_dataset <- data.frame(matrix(ncol=ncol(input_dataset_numerical_values), nrow = 0), check.names = FALSE)
colnames(full_input_dataset)<-colnames(input_dataset_numerical_values)
#SUBSETTING INPUT DATASETS
for (h in 1:length(years)){
year <- years[h]
# This empty dataset was constructed to record the yearly total for the categorical values to be visualized later
summarized_categorical_values_1 <- data.frame(matrix(ncol=8, nrow = 0), check.names = FALSE)
colnames(summarized_categorical_values_1)<-c('year', 'pollutant', 'Tissue', 'Total_N', classification_categories, 'Outliers')
#Empty dataframes for accumulated categirical data
summarized_categorical_values_2_accumulated <- data.frame(matrix(ncol=8, nrow = 0), check.names = FALSE)
colnames(summarized_categorical_values_2_accumulated)<-c('year', 'pollutant', 'Tissue', 'Total_N', classification_categories, 'Outliers')
long_dataset_with_categorical_values_per_year <-as.data.frame(filter(long_dataset_with_categorical_values, Year==year))
long_dataset_with_numerical_values_per_year<-as.data.frame(filter(long_dataset_with_numerical_values_no_zero, Year==year))
# Used to subset categorical and numerical datasets per pollutant
for (i in 1:length(column_names)) {
pollutant_name <- column_names[i]
#Empty dataset for outlier detection using numerical dataset
outlier_detection_using_numerical_values <- data.frame(matrix(ncol=5, nrow = 0), check.names = FALSE)
colnames(outlier_detection_using_numerical_values) <-c('year','Tissue', 'pollutant', 'concentration', 'outlier')
dataset_for_categorical_values_per_pollutant <-as.data.frame(filter(long_dataset_with_categorical_values_per_year, pollutant==pollutant_name))
dataset_for_numerical_values_per_pollutant <-as.data.frame(filter(long_dataset_with_numerical_values_per_year, pollutant== pollutant_name))
# Used to subset categorical and numerical datasets per tissue
for(j in 1:length(tissues)){
tissue_name <- tissues[j]
dataset_for_categorical_values_per_tissue<-as.data.frame(filter(dataset_for_categorical_values_per_pollutant, Tissue==tissue_name))
dataset_for_numerical_values_per_tissue<-as.data.frame(filter(dataset_for_numerical_values_per_pollutant, Tissue==tissue_name)%>%mutate(outlier=NA))
#summarizing dataset based on the count of each classification category with the final column as the sum of the outlier for the detected values using dataset_for_numerical_values_per_tissue
summarized_categorical_values_1[1,1] <- year
summarized_categorical_values_1[1,2] <- pollutant_name
summarized_categorical_values_1[1,3] <- tissue_name
summarized_categorical_values_1[1,4] <- nrow(dataset_for_numerical_values_per_tissue)
summarized_categorical_values_1[1,5] <- sum(str_count(dataset_for_categorical_values_per_tissue$status,category1))
summarized_categorical_values_1[1,6] <- sum(str_count(dataset_for_categorical_values_per_tissue$status,fixed(category2)))
summarized_categorical_values_1[1,7] <- sum(str_count(dataset_for_categorical_values_per_tissue$status,category3))
# This if function would mainly accommodate datasets after being subsetted for tissue with at least one or no entries. for example; inksac in 2019.
if(nrow(dataset_for_numerical_values_per_tissue)>1){
summarized_categorical_values_1[1,8] <- outliercheck(x=dataset_for_numerical_values_per_tissue, y=input_dataset_numerical_values)[[1]]
outlier_detection_dataset1 <- outliercheck(x=dataset_for_numerical_values_per_tissue, y=input_dataset_numerical_values)[[2]]
outlier_detection_using_numerical_values <- rbind(outlier_detection_using_numerical_values, outlier_detection_dataset1)
partial_input_dataset <- outliercheck(x=dataset_for_numerical_values_per_tissue, y=input_dataset_numerical_values)[[3]]
full_input_dataset <- rbind(full_input_dataset, partial_input_dataset)
#print(dataset_for_numerical_values_per_tissue)
}else{ #If the number of rows for dataset_for_numerical_values_per_tissue is less than 1 then we run below code
summarized_categorical_values_1[1,8] <- 0 #put 0 for last column in summarized_categorical_values_1 dataset
#print(summarized_categorical_values_1)
#Reconstruct the dataset_for_numerical_values_per_tissue to record the dearth in data for this tissue.
dataset_for_numerical_values_per_tissue[ 1,'Year'] <- paste(year)
dataset_for_numerical_values_per_tissue[ 1,'pollutant'] <- paste(pollutant_name)
dataset_for_numerical_values_per_tissue[ 1,'Tissue'] <- paste(tissue_name)
#If the dataset_for_numerical_values_per_tissue has atleast 1 row then we just keep the concentration
if(nrow(dataset_for_numerical_values_per_tissue)==1){
dataset_for_numerical_values_per_tissue[1,'concentration'] <- paste(dataset_for_numerical_values_per_tissue[,'concentration'])
}else{ #If the dataset_for_numerical_values_per_tissue has no rows then we put the concentration as 0
dataset_for_numerical_values_per_tissue[ 1,'concentration'] <- 0
}
#Whether the dataset_for_numerical_values_per_tissue has 1 or no rows then we record in the last column that there are no outliers sinc there will be no other values to compare that one value of no values with.
dataset_for_numerical_values_per_tissue[ 1,'outlier'] <- 'no'
#Accumulating the dataset_for_numerical_values_per_tissue for a final dataset for all tissues
outlier_detection_using_numerical_values <- rbind(outlier_detection_using_numerical_values, dataset_for_numerical_values_per_tissue)
}
#Accumulating the summarized_categorical_values_1 dataset for a final dataset for all tissues
summarized_categorical_values_2_accumulated <- rbind(summarized_categorical_values_2_accumulated,summarized_categorical_values_1)
print(summarized_categorical_values_1)
} #Tissue
#Accumulating the outlier_detection_using_numerical_values dataset for a final dataset for all tissues
full_dataset_for_outlier_detection_using_numerical_values <- rbind(full_dataset_for_outlier_detection_using_numerical_values, outlier_detection_using_numerical_values)
}# pollutants
summarized_categorical_values_full <- rbind(summarized_categorical_values_full,summarized_categorical_values_2_accumulated)
summarized_categorical_values_yearly_total <- data.frame(matrix(ncol=8, nrow = 0), check.names = FALSE)
colnames(summarized_categorical_values_yearly_total)<-c('year', 'pollutant', 'Tissue', 'Total_N',classification_categories, 'Outliers')
#summarizing datasets based on the count of each classification category using the long_dataset_with_categorical_values_per_year for the yearly categorical values
summarized_categorical_values_yearly_total[1,1] <- year
summarized_categorical_values_yearly_total[1,2] <- 'Total'
summarized_categorical_values_yearly_total[1,3] <- 'Total'
summarized_categorical_values_yearly_total[1,4] <- nrow(long_dataset_with_categorical_values_per_year)
summarized_categorical_values_yearly_total[1,5] <- sum(str_count(long_dataset_with_categorical_values_per_year$status,category1))
summarized_categorical_values_yearly_total[1,6] <- sum(str_count(long_dataset_with_categorical_values_per_year$status,fixed(category2)))
summarized_categorical_values_yearly_total[1,7] <- sum(str_count(long_dataset_with_categorical_values_per_year$status,category3))
summarized_categorical_values_yearly_total[1,8] <- sum(as.numeric(summarized_categorical_values_full$Outliers))
#print(long_dataset_with_categorical_values_per_year)
#Accumulating the summarized_categorical_values_yearly_total for each year into one dataset.
summarized_categorical_values_full <- rbind(summarized_categorical_values_full, summarized_categorical_values_yearly_total)
} #years
summarized_categorical_values_full1 <- summarized_categorical_values_full
#print(summarized_categorical_values_full%>%filter(year == 2021))
#print(summarized_categorical_values_full1%>%filter(year == 2021))
for(row in 1:nrow(summarized_categorical_values_full1)) {
summarized_categorical_values_full1[row,'Detected'] <- summarized_categorical_values_full1[row,'Detected']-summarized_categorical_values_full1[row,'Outliers']
}
status_levels<- status_levels
final_dataset_categorical_values<- summarized_categorical_values_full1 %>% pivot_longer(all_of(status_levels), names_to = "status", values_to = "values")
if(distribution_using == 'Tissues'){
final_dataset_for_plotting <- final_dataset_categorical_values %>%group_by(status, Tissue,pollutant, year) %>%mutate(Percentage = (values/Total_N)* 100) #correct (status, Tissue,pollutant, year)
}else if (distribution_using == 'Pollutants') {
final_dataset_for_plotting <- final_dataset_categorical_values %>%
filter(!(Tissue == "inksac" & year == 2019)) %>%  # Remove rows with inksacs and 2019
group_by(status,pollutant, year) %>%
mutate(Percentage = (values / Total_N) * 100)
# print("fdcv")
# print(final_dataset_categorical_values %>% filter(pollutant == 'Hg'& year == 2021))
# print('fdfp')
# print(final_dataset_for_plotting %>% filter(pollutant == 'Hg'& year == 2021))
}else{
stop("Please enter either 'Tissues' or 'Pollutants' for 'distribution_using' to view data distribution")
}
final_dataset_for_plotting[is.na(final_dataset_for_plotting) | final_dataset_for_plotting < 0] = 0
#final_dataset_for_plotting[is.na(final_dataset_for_plotting)] = 0
# print('Below are the final results from summarizing_and_subsetting_datasets function')
# print('This dataset is called summarized_categorical_values_full')
# print(summarized_categorical_values_full)
# print('This dataset is called outlier_detection_using_numerical_value')
# print(outlier_detection_using_numerical_values)
# print('This dataset is called final_dataset_for_plotting')
# print(as.data.frame(final_dataset_for_plotting))
return(list (summarized_categorical_values_full=summarized_categorical_values_full, full_dataset_for_outlier_detection_using_numerical_values=full_dataset_for_outlier_detection_using_numerical_values,input_dataset_numerical_values=input_dataset_numerical_values, final_dataset_for_plotting=final_dataset_for_plotting))
}
final_list <- data_distribution(datasets_for_heavy_metals_data_distribution, keep_outliers=TRUE, distribution_using = 'Pollutants')
#This function iterates uses the data_list input and subsets both the numerical and categoral datasets per year, pollutant and tissue for detailed processing of data distribution which includes summarizing the data per year, tissue and pollutant to find out which and how many of the concentration values using the classification categories (detected, below limit of quantification (BLOQ) and below limit of detection (BLOD) and Below blank control (BB)). In addition it uses the outliercheck function to detect and summarize the number of outliers in each subsetted dataset and returns summarized dataframes showing the detected outlier values and final datasets where the outliers are removed or not based on the users preference. It also returns the summarized categorical dataset showing the number of values for each category per year, pollutant and tissue.
summarizing_and_subsetting_datasets <- function (x, y, classification_categories, status_levels, column_range, distribution_using){
#LOADING INPUT DATASETS
#Loading datasets from lists to be subsetted later for data distribution processing
Subset_of_dataset_with_numerical_values <- x[,c(column_range,1,3,6)]
Subset_of_dataset_with_categorical_values <- y[,c(column_range,1,3,6)]
input_dataset_numerical_values<-x #saving the dataset_with_numerical_values as the input dataset for outliercheck and fiinal_dataset creation
#print(input_dataset_numerical_values)
#loading classification categories
{if(!is.na(classification_categories[1]))category1<-(classification_categories[1])}
{if(!is.na(classification_categories[2]))category2<-(classification_categories[2])}
{if(!is.na(classification_categories[3]))category3<-(classification_categories[3])}
#HOUSEKEEPING BEFORE PROCESSING
#Getting column names from datasets
column_names <- colnames(input_dataset_numerical_values)[column_range]
#arranging tissues into a vector specifically to rank them accoriding to toxicity (from tissue with highest toxicity to lowest)
tissues <- c('liver', 'stomach', 'muscle', 'inksac')
#Saving years as levels for for loop
years <- levels(factor(input_dataset_numerical_values[,3]))
#Changing loaded datasets to long format for further processing
long_dataset_with_categorical_values <- Subset_of_dataset_with_categorical_values %>% pivot_longer(all_of(column_names), names_to = "pollutant", values_to = "status")
long_dataset_with_numerical_values_no_zero <- Subset_of_dataset_with_numerical_values %>% pivot_longer(all_of(column_names), names_to = "pollutant", values_to = "concentration")%>%subset(concentration !=0)
# long_dataset_with_numerical_values_with_zero <- Subset_of_dataset_with_numerical_values %>% pivot_longer(all_of(column_names), names_to = "pollutant", values_to = "concentration")
#CREATING EMPTY DATAFRAMES
#Empty dataframe to store the accumulated yearly total for the categorical values to be visualized later
summarized_categorical_values_full <- data.frame(matrix(ncol=8, nrow = 0), check.names = FALSE)
colnames(summarized_categorical_values_full)<-c('year', 'pollutant', 'Tissue', 'Total_N', classification_categories, 'Outliers')
#Empty dataset for outlier detection using numerical dataset
full_dataset_for_outlier_detection_using_numerical_values <- data.frame(matrix(ncol=5, nrow = 0), check.names = FALSE)
colnames(full_dataset_for_outlier_detection_using_numerical_values)<-c('year','Tissue', 'pollutant', 'concentration', 'outlier')
#Empty dataset for outlier count.
summarized_categorical_values_1 <- data.frame(matrix(ncol=8, nrow = 0), check.names = FALSE)
colnames(summarized_categorical_values_1)<-c('year', 'pollutant', 'Tissue', 'Total_N', classification_categories, 'Outliers')
#Empty dataset for accumulated input dataset.
full_input_dataset <- data.frame(matrix(ncol=ncol(input_dataset_numerical_values), nrow = 0), check.names = FALSE)
colnames(full_input_dataset)<-colnames(input_dataset_numerical_values)
#SUBSETTING INPUT DATASETS
for (h in 1:length(years)){
year <- years[h]
# This empty dataset was constructed to record the yearly total for the categorical values to be visualized later
summarized_categorical_values_1 <- data.frame(matrix(ncol=8, nrow = 0), check.names = FALSE)
colnames(summarized_categorical_values_1)<-c('year', 'pollutant', 'Tissue', 'Total_N', classification_categories, 'Outliers')
#Empty dataframes for accumulated categirical data
summarized_categorical_values_2_accumulated <- data.frame(matrix(ncol=8, nrow = 0), check.names = FALSE)
colnames(summarized_categorical_values_2_accumulated)<-c('year', 'pollutant', 'Tissue', 'Total_N', classification_categories, 'Outliers')
long_dataset_with_categorical_values_per_year <-as.data.frame(filter(long_dataset_with_categorical_values, Year==year))
long_dataset_with_numerical_values_per_year<-as.data.frame(filter(long_dataset_with_numerical_values_no_zero, Year==year))
# Used to subset categorical and numerical datasets per pollutant
for (i in 1:length(column_names)) {
pollutant_name <- column_names[i]
#Empty dataset for outlier detection using numerical dataset
outlier_detection_using_numerical_values <- data.frame(matrix(ncol=5, nrow = 0), check.names = FALSE)
colnames(outlier_detection_using_numerical_values) <-c('year','Tissue', 'pollutant', 'concentration', 'outlier')
dataset_for_categorical_values_per_pollutant <-as.data.frame(filter(long_dataset_with_categorical_values_per_year, pollutant==pollutant_name))
dataset_for_numerical_values_per_pollutant <-as.data.frame(filter(long_dataset_with_numerical_values_per_year, pollutant== pollutant_name))
# Used to subset categorical and numerical datasets per tissue
for(j in 1:length(tissues)){
tissue_name <- tissues[j]
dataset_for_categorical_values_per_tissue<-as.data.frame(filter(dataset_for_categorical_values_per_pollutant, Tissue==tissue_name))
dataset_for_numerical_values_per_tissue<-as.data.frame(filter(dataset_for_numerical_values_per_pollutant, Tissue==tissue_name)%>%mutate(outlier=NA))
#summarizing dataset based on the count of each classification category with the final column as the sum of the outlier for the detected values using dataset_for_numerical_values_per_tissue
summarized_categorical_values_1[1,1] <- year
summarized_categorical_values_1[1,2] <- pollutant_name
summarized_categorical_values_1[1,3] <- tissue_name
summarized_categorical_values_1[1,4] <- nrow(dataset_for_categorical_values_per_tissue)
summarized_categorical_values_1[1,5] <- sum(str_count(dataset_for_categorical_values_per_tissue$status,category1))
summarized_categorical_values_1[1,6] <- sum(str_count(dataset_for_categorical_values_per_tissue$status,fixed(category2)))
summarized_categorical_values_1[1,7] <- sum(str_count(dataset_for_categorical_values_per_tissue$status,category3))
# This if function would mainly accommodate datasets after being subsetted for tissue with at least one or no entries. for example; inksac in 2019.
if(nrow(dataset_for_numerical_values_per_tissue)>1){
summarized_categorical_values_1[1,8] <- outliercheck(x=dataset_for_numerical_values_per_tissue, y=input_dataset_numerical_values)[[1]]
outlier_detection_dataset1 <- outliercheck(x=dataset_for_numerical_values_per_tissue, y=input_dataset_numerical_values)[[2]]
outlier_detection_using_numerical_values <- rbind(outlier_detection_using_numerical_values, outlier_detection_dataset1)
partial_input_dataset <- outliercheck(x=dataset_for_numerical_values_per_tissue, y=input_dataset_numerical_values)[[3]]
full_input_dataset <- rbind(full_input_dataset, partial_input_dataset)
#print(dataset_for_numerical_values_per_tissue)
}else{ #If the number of rows for dataset_for_numerical_values_per_tissue is less than 1 then we run below code
summarized_categorical_values_1[1,8] <- 0 #put 0 for last column in summarized_categorical_values_1 dataset
#print(summarized_categorical_values_1)
#Reconstruct the dataset_for_numerical_values_per_tissue to record the dearth in data for this tissue.
dataset_for_numerical_values_per_tissue[ 1,'Year'] <- paste(year)
dataset_for_numerical_values_per_tissue[ 1,'pollutant'] <- paste(pollutant_name)
dataset_for_numerical_values_per_tissue[ 1,'Tissue'] <- paste(tissue_name)
#If the dataset_for_numerical_values_per_tissue has atleast 1 row then we just keep the concentration
if(nrow(dataset_for_numerical_values_per_tissue)==1){
dataset_for_numerical_values_per_tissue[1,'concentration'] <- paste(dataset_for_numerical_values_per_tissue[,'concentration'])
}else{ #If the dataset_for_numerical_values_per_tissue has no rows then we put the concentration as 0
dataset_for_numerical_values_per_tissue[ 1,'concentration'] <- 0
}
#Whether the dataset_for_numerical_values_per_tissue has 1 or no rows then we record in the last column that there are no outliers sinc there will be no other values to compare that one value of no values with.
dataset_for_numerical_values_per_tissue[ 1,'outlier'] <- 'no'
#Accumulating the dataset_for_numerical_values_per_tissue for a final dataset for all tissues
outlier_detection_using_numerical_values <- rbind(outlier_detection_using_numerical_values, dataset_for_numerical_values_per_tissue)
}
#Accumulating the summarized_categorical_values_1 dataset for a final dataset for all tissues
summarized_categorical_values_2_accumulated <- rbind(summarized_categorical_values_2_accumulated,summarized_categorical_values_1)
print(summarized_categorical_values_1)
} #Tissue
#Accumulating the outlier_detection_using_numerical_values dataset for a final dataset for all tissues
full_dataset_for_outlier_detection_using_numerical_values <- rbind(full_dataset_for_outlier_detection_using_numerical_values, outlier_detection_using_numerical_values)
}# pollutants
summarized_categorical_values_full <- rbind(summarized_categorical_values_full,summarized_categorical_values_2_accumulated)
summarized_categorical_values_yearly_total <- data.frame(matrix(ncol=8, nrow = 0), check.names = FALSE)
colnames(summarized_categorical_values_yearly_total)<-c('year', 'pollutant', 'Tissue', 'Total_N',classification_categories, 'Outliers')
#summarizing datasets based on the count of each classification category using the long_dataset_with_categorical_values_per_year for the yearly categorical values
summarized_categorical_values_yearly_total[1,1] <- year
summarized_categorical_values_yearly_total[1,2] <- 'Total'
summarized_categorical_values_yearly_total[1,3] <- 'Total'
summarized_categorical_values_yearly_total[1,4] <- nrow(long_dataset_with_categorical_values_per_year)
summarized_categorical_values_yearly_total[1,5] <- sum(str_count(long_dataset_with_categorical_values_per_year$status,category1))
summarized_categorical_values_yearly_total[1,6] <- sum(str_count(long_dataset_with_categorical_values_per_year$status,fixed(category2)))
summarized_categorical_values_yearly_total[1,7] <- sum(str_count(long_dataset_with_categorical_values_per_year$status,category3))
summarized_categorical_values_yearly_total[1,8] <- sum(as.numeric(summarized_categorical_values_full$Outliers))
#print(long_dataset_with_categorical_values_per_year)
#Accumulating the summarized_categorical_values_yearly_total for each year into one dataset.
summarized_categorical_values_full <- rbind(summarized_categorical_values_full, summarized_categorical_values_yearly_total)
} #years
summarized_categorical_values_full1 <- summarized_categorical_values_full
#print(summarized_categorical_values_full%>%filter(year == 2021))
#print(summarized_categorical_values_full1%>%filter(year == 2021))
for(row in 1:nrow(summarized_categorical_values_full1)) {
summarized_categorical_values_full1[row,'Detected'] <- summarized_categorical_values_full1[row,'Detected']-summarized_categorical_values_full1[row,'Outliers']
}
status_levels<- status_levels
final_dataset_categorical_values<- summarized_categorical_values_full1 %>% pivot_longer(all_of(status_levels), names_to = "status", values_to = "values")
if(distribution_using == 'Tissues'){
final_dataset_for_plotting <- final_dataset_categorical_values %>%group_by(status, Tissue,pollutant, year) %>%mutate(Percentage = (values/Total_N)* 100) #correct (status, Tissue,pollutant, year)
}else if (distribution_using == 'Pollutants') {
final_dataset_for_plotting <- final_dataset_categorical_values %>%
filter(!(Tissue == "inksac" & year == 2019)) %>%  # Remove rows with inksacs and 2019
group_by(status,pollutant, year) %>%
mutate(Percentage = (values / Total_N) * 100)
# print("fdcv")
# print(final_dataset_categorical_values %>% filter(pollutant == 'Hg'& year == 2021))
# print('fdfp')
# print(final_dataset_for_plotting %>% filter(pollutant == 'Hg'& year == 2021))
}else{
stop("Please enter either 'Tissues' or 'Pollutants' for 'distribution_using' to view data distribution")
}
final_dataset_for_plotting[is.na(final_dataset_for_plotting) | final_dataset_for_plotting < 0] = 0
#final_dataset_for_plotting[is.na(final_dataset_for_plotting)] = 0
# print('Below are the final results from summarizing_and_subsetting_datasets function')
# print('This dataset is called summarized_categorical_values_full')
# print(summarized_categorical_values_full)
# print('This dataset is called outlier_detection_using_numerical_value')
# print(outlier_detection_using_numerical_values)
# print('This dataset is called final_dataset_for_plotting')
# print(as.data.frame(final_dataset_for_plotting))
return(list (summarized_categorical_values_full=summarized_categorical_values_full, full_dataset_for_outlier_detection_using_numerical_values=full_dataset_for_outlier_detection_using_numerical_values,input_dataset_numerical_values=input_dataset_numerical_values, final_dataset_for_plotting=final_dataset_for_plotting))
}
final_list <- data_distribution(datasets_for_heavy_metals_data_distribution, keep_outliers=TRUE, distribution_using = 'Pollutants')
datasets_for_heavy_metals_data_distribution <- process_dataset_for_data_distribution(heavymetals_data, keep_LOQ_values = TRUE)
final_list <- data_distribution(datasets_for_heavy_metals_data_distribution, keep_outliers=TRUE, distribution_using = 'Pollutants')
final_list <- data_distribution(datasets_for_heavy_metals_data_distribution, keep_outliers=TRUE, distribution_using = 'Tissues')
#This function iterates uses the data_list input and subsets both the numerical and categoral datasets per year, pollutant and tissue for detailed processing of data distribution which includes summarizing the data per year, tissue and pollutant to find out which and how many of the concentration values using the classification categories (detected, below limit of quantification (BLOQ) and below limit of detection (BLOD) and Below blank control (BB)). In addition it uses the outliercheck function to detect and summarize the number of outliers in each subsetted dataset and returns summarized dataframes showing the detected outlier values and final datasets where the outliers are removed or not based on the users preference. It also returns the summarized categorical dataset showing the number of values for each category per year, pollutant and tissue.
summarizing_and_subsetting_datasets <- function (x, y, classification_categories, status_levels, column_range, distribution_using){
#LOADING INPUT DATASETS
#Loading datasets from lists to be subsetted later for data distribution processing
Subset_of_dataset_with_numerical_values <- x[,c(column_range,1,3,6)]
Subset_of_dataset_with_categorical_values <- y[,c(column_range,1,3,6)]
input_dataset_numerical_values<-x #saving the dataset_with_numerical_values as the input dataset for outliercheck and fiinal_dataset creation
#print(input_dataset_numerical_values)
#loading classification categories
{if(!is.na(classification_categories[1]))category1<-(classification_categories[1])}
{if(!is.na(classification_categories[2]))category2<-(classification_categories[2])}
{if(!is.na(classification_categories[3]))category3<-(classification_categories[3])}
#HOUSEKEEPING BEFORE PROCESSING
#Getting column names from datasets
column_names <- colnames(input_dataset_numerical_values)[column_range]
#arranging tissues into a vector specifically to rank them accoriding to toxicity (from tissue with highest toxicity to lowest)
tissues <- c('liver', 'stomach', 'muscle', 'inksac')
#Saving years as levels for for loop
years <- levels(factor(input_dataset_numerical_values[,3]))
#Changing loaded datasets to long format for further processing
long_dataset_with_categorical_values <- Subset_of_dataset_with_categorical_values %>% pivot_longer(all_of(column_names), names_to = "pollutant", values_to = "status")
long_dataset_with_numerical_values_no_zero <- Subset_of_dataset_with_numerical_values %>% pivot_longer(all_of(column_names), names_to = "pollutant", values_to = "concentration")%>%subset(concentration !=0)
# long_dataset_with_numerical_values_with_zero <- Subset_of_dataset_with_numerical_values %>% pivot_longer(all_of(column_names), names_to = "pollutant", values_to = "concentration")
#CREATING EMPTY DATAFRAMES
#Empty dataframe to store the accumulated yearly total for the categorical values to be visualized later
summarized_categorical_values_full <- data.frame(matrix(ncol=8, nrow = 0), check.names = FALSE)
colnames(summarized_categorical_values_full)<-c('year', 'pollutant', 'Tissue', 'Total_N', classification_categories, 'Outliers')
#Empty dataset for outlier detection using numerical dataset
full_dataset_for_outlier_detection_using_numerical_values <- data.frame(matrix(ncol=5, nrow = 0), check.names = FALSE)
colnames(full_dataset_for_outlier_detection_using_numerical_values)<-c('year','Tissue', 'pollutant', 'concentration', 'outlier')
#Empty dataset for outlier count.
summarized_categorical_values_1 <- data.frame(matrix(ncol=8, nrow = 0), check.names = FALSE)
colnames(summarized_categorical_values_1)<-c('year', 'pollutant', 'Tissue', 'Total_N', classification_categories, 'Outliers')
#Empty dataset for accumulated input dataset.
full_input_dataset <- data.frame(matrix(ncol=ncol(input_dataset_numerical_values), nrow = 0), check.names = FALSE)
colnames(full_input_dataset)<-colnames(input_dataset_numerical_values)
#SUBSETTING INPUT DATASETS
for (h in 1:length(years)){
year <- years[h]
# This empty dataset was constructed to record the yearly total for the categorical values to be visualized later
summarized_categorical_values_1 <- data.frame(matrix(ncol=8, nrow = 0), check.names = FALSE)
colnames(summarized_categorical_values_1)<-c('year', 'pollutant', 'Tissue', 'Total_N', classification_categories, 'Outliers')
#Empty dataframes for accumulated categirical data
summarized_categorical_values_2_accumulated <- data.frame(matrix(ncol=8, nrow = 0), check.names = FALSE)
colnames(summarized_categorical_values_2_accumulated)<-c('year', 'pollutant', 'Tissue', 'Total_N', classification_categories, 'Outliers')
long_dataset_with_categorical_values_per_year <-as.data.frame(filter(long_dataset_with_categorical_values, Year==year))
long_dataset_with_numerical_values_per_year<-as.data.frame(filter(long_dataset_with_numerical_values_no_zero, Year==year))
# Used to subset categorical and numerical datasets per pollutant
for (i in 1:length(column_names)) {
pollutant_name <- column_names[i]
#Empty dataset for outlier detection using numerical dataset
outlier_detection_using_numerical_values <- data.frame(matrix(ncol=5, nrow = 0), check.names = FALSE)
colnames(outlier_detection_using_numerical_values) <-c('year','Tissue', 'pollutant', 'concentration', 'outlier')
dataset_for_categorical_values_per_pollutant <-as.data.frame(filter(long_dataset_with_categorical_values_per_year, pollutant==pollutant_name))
dataset_for_numerical_values_per_pollutant <-as.data.frame(filter(long_dataset_with_numerical_values_per_year, pollutant== pollutant_name))
# Used to subset categorical and numerical datasets per tissue
for(j in 1:length(tissues)){
tissue_name <- tissues[j]
dataset_for_categorical_values_per_tissue<-as.data.frame(filter(dataset_for_categorical_values_per_pollutant, Tissue==tissue_name))
dataset_for_numerical_values_per_tissue<-as.data.frame(filter(dataset_for_numerical_values_per_pollutant, Tissue==tissue_name)%>%mutate(outlier=NA))
#summarizing dataset based on the count of each classification category with the final column as the sum of the outlier for the detected values using dataset_for_numerical_values_per_tissue
summarized_categorical_values_1[1,1] <- year
summarized_categorical_values_1[1,2] <- pollutant_name
summarized_categorical_values_1[1,3] <- tissue_name
summarized_categorical_values_1[1,4] <- nrow(dataset_for_categorical_values_per_tissue)
summarized_categorical_values_1[1,5] <- sum(str_count(dataset_for_categorical_values_per_tissue$status,category1))
summarized_categorical_values_1[1,6] <- sum(str_count(dataset_for_categorical_values_per_tissue$status,fixed(category2)))
summarized_categorical_values_1[1,7] <- sum(str_count(dataset_for_categorical_values_per_tissue$status,category3))
# This if function would mainly accommodate datasets after being subsetted for tissue with at least one or no entries. for example; inksac in 2019.
if(nrow(dataset_for_numerical_values_per_tissue)>1){
summarized_categorical_values_1[1,8] <- outliercheck(x=dataset_for_numerical_values_per_tissue, y=input_dataset_numerical_values)[[1]]
outlier_detection_dataset1 <- outliercheck(x=dataset_for_numerical_values_per_tissue, y=input_dataset_numerical_values)[[2]]
outlier_detection_using_numerical_values <- rbind(outlier_detection_using_numerical_values, outlier_detection_dataset1)
partial_input_dataset <- outliercheck(x=dataset_for_numerical_values_per_tissue, y=input_dataset_numerical_values)[[3]]
full_input_dataset <- rbind(full_input_dataset, partial_input_dataset)
#print(dataset_for_numerical_values_per_tissue)
}else{ #If the number of rows for dataset_for_numerical_values_per_tissue is less than 1 then we run below code
summarized_categorical_values_1[1,8] <- 0 #put 0 for last column in summarized_categorical_values_1 dataset
#print(summarized_categorical_values_1)
#Reconstruct the dataset_for_numerical_values_per_tissue to record the dearth in data for this tissue.
dataset_for_numerical_values_per_tissue[ 1,'Year'] <- paste(year)
dataset_for_numerical_values_per_tissue[ 1,'pollutant'] <- paste(pollutant_name)
dataset_for_numerical_values_per_tissue[ 1,'Tissue'] <- paste(tissue_name)
#If the dataset_for_numerical_values_per_tissue has atleast 1 row then we just keep the concentration
if(nrow(dataset_for_numerical_values_per_tissue)==1){
dataset_for_numerical_values_per_tissue[1,'concentration'] <- paste(dataset_for_numerical_values_per_tissue[,'concentration'])
}else{ #If the dataset_for_numerical_values_per_tissue has no rows then we put the concentration as 0
dataset_for_numerical_values_per_tissue[ 1,'concentration'] <- 0
}
#Whether the dataset_for_numerical_values_per_tissue has 1 or no rows then we record in the last column that there are no outliers sinc there will be no other values to compare that one value of no values with.
dataset_for_numerical_values_per_tissue[ 1,'outlier'] <- 'no'
#Accumulating the dataset_for_numerical_values_per_tissue for a final dataset for all tissues
outlier_detection_using_numerical_values <- rbind(outlier_detection_using_numerical_values, dataset_for_numerical_values_per_tissue)
}
#Accumulating the summarized_categorical_values_1 dataset for a final dataset for all tissues
summarized_categorical_values_2_accumulated <- rbind(summarized_categorical_values_2_accumulated,summarized_categorical_values_1)
} #Tissue
#Accumulating the outlier_detection_using_numerical_values dataset for a final dataset for all tissues
full_dataset_for_outlier_detection_using_numerical_values <- rbind(full_dataset_for_outlier_detection_using_numerical_values, outlier_detection_using_numerical_values)
}# pollutants
summarized_categorical_values_full <- rbind(summarized_categorical_values_full,summarized_categorical_values_2_accumulated)
summarized_categorical_values_yearly_total <- data.frame(matrix(ncol=8, nrow = 0), check.names = FALSE)
colnames(summarized_categorical_values_yearly_total)<-c('year', 'pollutant', 'Tissue', 'Total_N',classification_categories, 'Outliers')
#summarizing datasets based on the count of each classification category using the long_dataset_with_categorical_values_per_year for the yearly categorical values
summarized_categorical_values_yearly_total[1,1] <- year
summarized_categorical_values_yearly_total[1,2] <- 'Total'
summarized_categorical_values_yearly_total[1,3] <- 'Total'
summarized_categorical_values_yearly_total[1,4] <- nrow(long_dataset_with_categorical_values_per_year)
summarized_categorical_values_yearly_total[1,5] <- sum(str_count(long_dataset_with_categorical_values_per_year$status,category1))
summarized_categorical_values_yearly_total[1,6] <- sum(str_count(long_dataset_with_categorical_values_per_year$status,fixed(category2)))
summarized_categorical_values_yearly_total[1,7] <- sum(str_count(long_dataset_with_categorical_values_per_year$status,category3))
summarized_categorical_values_yearly_total[1,8] <- sum(as.numeric(summarized_categorical_values_full$Outliers))
#print(long_dataset_with_categorical_values_per_year)
#Accumulating the summarized_categorical_values_yearly_total for each year into one dataset.
summarized_categorical_values_full <- rbind(summarized_categorical_values_full, summarized_categorical_values_yearly_total)
} #years
summarized_categorical_values_full1 <- summarized_categorical_values_full
#print(summarized_categorical_values_full%>%filter(year == 2021))
#print(summarized_categorical_values_full1%>%filter(year == 2021))
for(row in 1:nrow(summarized_categorical_values_full1)) {
summarized_categorical_values_full1[row,'Detected'] <- summarized_categorical_values_full1[row,'Detected']-summarized_categorical_values_full1[row,'Outliers']
}
status_levels<- status_levels
final_dataset_categorical_values<- summarized_categorical_values_full1 %>% pivot_longer(all_of(status_levels), names_to = "status", values_to = "values")
if(distribution_using == 'Tissues'){
final_dataset_for_plotting <- final_dataset_categorical_values %>%group_by(status, Tissue,pollutant, year) %>%mutate(Percentage = (values/Total_N)* 100) #correct (status, Tissue,pollutant, year)
}else if (distribution_using == 'Pollutants') {
final_dataset_for_plotting <- final_dataset_categorical_values %>%
filter(!(Tissue == "inksac" & year == 2019)) %>%  # Remove rows with inksacs and 2019
group_by(status,pollutant, year) %>%
mutate(Percentage = (values / Total_N) * 100)
# print("fdcv")
# print(final_dataset_categorical_values %>% filter(pollutant == 'Hg'& year == 2021))
# print('fdfp')
# print(final_dataset_for_plotting %>% filter(pollutant == 'Hg'& year == 2021))
}else{
stop("Please enter either 'Tissues' or 'Pollutants' for 'distribution_using' to view data distribution")
}
final_dataset_for_plotting[is.na(final_dataset_for_plotting) | final_dataset_for_plotting < 0] = 0
#final_dataset_for_plotting[is.na(final_dataset_for_plotting)] = 0
print('Below are the final results from summarizing_and_subsetting_datasets function')
print('This dataset is called summarized_categorical_values_full')
print(summarized_categorical_values_full)
print('This dataset is called outlier_detection_using_numerical_value')
print(outlier_detection_using_numerical_values)
print('This dataset is called final_dataset_for_plotting')
print(as.data.frame(final_dataset_for_plotting))
return(list (summarized_categorical_values_full=summarized_categorical_values_full, full_dataset_for_outlier_detection_using_numerical_values=full_dataset_for_outlier_detection_using_numerical_values,input_dataset_numerical_values=input_dataset_numerical_values, final_dataset_for_plotting=final_dataset_for_plotting))
}
final_list <- data_distribution(datasets_for_organic_compounds_data_distribution, keep_outliers=TRUE, distribution_using = 'Tissues')
final_list <- data_distribution(datasets_for_organic_compounds_data_distribution, keep_outliers=TRUE, distribution_using = 'Pollutants')
