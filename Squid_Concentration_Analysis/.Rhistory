coefficient1[1,8] <- unique(size_dataframe$size)
coefficient_dataframe1 <- rbind(coefficient_dataframe1, coefficient1)
}
}
}
s<-s+1
coefficient_dataframe_final <- rbind(coefficient_dataframe_final, coefficient_dataframe1)
coefficient_dataframe_final$Tissue <- as.character(coefficient_dataframe_final$Tissue)
coefficient_dataframe_final$Year <- as.character(coefficient_dataframe_final$Year)
#coefficient_dataframe_final$SM <- as.character(coefficient_dataframe_final$SM)
}
return (coefficient_dataframe_final)
}
elements_from_data_mining_using_mantle_length <- data_mining_using_mantle_length (datasets_for_organic_compounds_data_distribution, remove.zeroes = TRUE)
data_mining_using_mantle_length <- function(data_list, remove.zeroes=FALSE){
#Extracting dataset_with_numerical_values from datalist
#dataset0 <- data_list$dataset_with_numerical_values
#dataset1 <-matrix(unlist(dataset0), ncol = 12) #unlisting dataset and converting it to a matrix
dataset_with_numerical_values <- data_list$dataset_with_numerical_values
list0 <- list()
list1 <- list()
list2 <- list()
list0names <- c()
list1names <- c()
list2names <- c()
if (grepl("Fe|Ag", colnames(dataset_with_numerical_values)[16])) {
#This is to find the number of rows for in the first 1/3 of the dataset and save it as an idex to help categorizes the squids by their  sizes.
index <-round(1/3* nrow(dataset_with_numerical_values))
#Ordering the values within the Mantle Length column in ascending order
dataset_with_numerical_values <- dataset_with_numerical_values[order(dataset_with_numerical_values[["Mantle_length_mm"]]),]
# Adding the size column for further processing
dataset_with_numerical_values$size=NA
dataset_with_numerical_values$size[1:index]= paste('small','(',min(dataset_with_numerical_values$Mantle_length_mm[1:index]),'mm-',max(dataset_with_numerical_values$Mantle_length_mm[1:index]),'mm',')', sep = "")
dataset_with_numerical_values$size[c(index+1):c(index*2)]=paste('medium','(',min(dataset_with_numerical_values$Mantle_length_mm[c(index+1):c(index*2)]),'mm-',max(dataset_with_numerical_values$Mantle_length_mm[c(index+1):c(index*2)]),'mm',')', sep="")
dataset_with_numerical_values$size[c(index*2+1):c(index*3)]=paste('large','(',min(dataset_with_numerical_values$Mantle_length_mm[c(index*2+1):c(index*3)]),'mm-',max(dataset_with_numerical_values$Mantle_length_mm[c(index*2+1):c(index*3)]),'mm',')',sep = "")
dataset_with_numerical_values <- dataset_with_numerical_values %>% relocate(size, .after = dtfl_km)
#print(y[c(280:600),])
range <- colnames(dataset_with_numerical_values[17:26])
range_name <-'Fe:Pb'
number_range <- 17:26
subsetted_dataset_with_numerical_values <-dataset_with_numerical_values[,c(number_range,3, 6)]# streamlining dataframe for efficiency for heavy metals
}else{
#This is to find the number of rows for in the first 1/3 of the dataset and save it as an idex to help categorizes the squids by their  sizes.
index <-round(1/3* nrow(dataset_with_numerical_values))
#Ordering the values within the Mantle Length column in ascending order
dataset_with_numerical_values <- dataset_with_numerical_values[order(dataset_with_numerical_values[["Mantle_length_mm"]]),]
# Adding the size column for further processing
dataset_with_numerical_values$size=NA
# After ordering the mantle lengths in ascending order and finding the number of rows  for the first 1/3 of the dataset, this piece of code below categorizes the mantle sizes by "small', 'medium' and 'large'. For example the first 1/3 would be small and then it shows the minimum and maximum sizes, then second 1/3 would be medium and so..
dataset_with_numerical_values$size[1:index]= paste('small','(',min(dataset_with_numerical_values$Mantle_length_mm[1:index]),'mm-',max(dataset_with_numerical_values$Mantle_length_mm[1:index]),'mm',')', sep = "")
dataset_with_numerical_values$size[c(index+1):c(index*2)]=paste('medium','(',min(dataset_with_numerical_values$Mantle_length_mm[c(index+1):c(index*2)]),'mm-',max(dataset_with_numerical_values$Mantle_length_mm[c(index+1):c(index*2)]),'mm',')', sep="")
dataset_with_numerical_values$size[c(index*2+1):c(index*3)]=paste('large','(',min(dataset_with_numerical_values$Mantle_length_mm[c(index*2+1):c(index*3)]),'mm-',max(dataset_with_numerical_values$Mantle_length_mm[c(index*2+1):c(index*3)]),'mm',')',sep = "")
dataset_with_numerical_values <- dataset_with_numerical_values %>% relocate(size, .after = dtfl_km)
range <- colnames(dataset_with_numerical_values[17:20])
range_name <-'Adipic_acid:Ibuprofen'
number_range <- 17:20
subsetted_dataset_with_numerical_values <-dataset_with_numerical_values[,c(number_range,3, 6,7:12)]# streamlining dataframe for efficiency for heavy metals
}
h<-1
subsetted_dataset_with_variables <-dataset_with_numerical_values[,c(7,8)]
while(h != 4){
variable <- colnames(subsetted_dataset_with_variables)[h]
print(variable)
coefficients_accumulated <- data.frame(matrix(ncol=9, nrow = 0))
pvalues <- data.frame(matrix(ncol=9, nrow = 0))
subsetted_dataset_with_numerical_values2 <-subsetted_dataset_with_numerical_values
sizes <- levels(factor(subsetted_dataset_with_numerical_values2$size))
years <- levels(factor(subsetted_dataset_with_numerical_values2$Year))
tissues <- levels(factor(subsetted_dataset_with_numerical_values2$Tissue))
if(remove.zeroes==FALSE){
long_dataset<- subsetted_dataset_with_numerical_values2 %>% pivot_longer(all_of(range), names_to = "pollutants", values_to = "concentrations")%>%pivot_longer (!! rlang::sym(paste0(variable)), names_to = "vars", values_to = "values") %>%
mutate(concentrations = as.numeric(concentrations),   # Convert 'concentrations' to numeric
values = as.numeric(values))                    # Convert 'values' to numeric (if needed)
}else{
long_dataset<- subsetted_dataset_with_numerical_values2 %>% pivot_longer(all_of(range), names_to = "pollutants", values_to = "concentrations")%>%pivot_longer (!! rlang::sym(paste0(variable)), names_to = "vars", values_to = "values")%>%subset(concentrations !=0) %>%
mutate(
concentrations = as.numeric(concentrations),   # Convert 'concentrations' to numeric
values = as.numeric(values))                    # Convert 'values' to numeric (if needed)
}
if(nrow(long_dataset)!= 0){
for(i in 1:length(tissues)){
long_dataset_subsetted_by_tissue <-data.frame(long_dataset %>% group_by(Year) %>% subset(Tissue == tissues[i]))
if((nrow(long_dataset_subsetted_by_tissue)!=0)==TRUE){
print('Im here0')
coefficients <- get_coefficients(long_dataset_subsetted_by_tissue)##########
print(coefficients)
coefficients_accumulated <- rbind(coefficients_accumulated, coefficients)
}
}
pvalues <- coefficient_modification(coefficients_accumulated)
print('Im here1')
print(pvalues)
pvalues_accumulated <- rbind(pvalues_accumulated, pvalues)
#print(pvalues_accumulated)
print('Im here2')
#Below is for setting y scale----
coefficients_accumulated_modified <-coefficients_accumulated[,-c(4:6)]
#print(coefficients_accumulated_modified)
coefficients_accumulated_modified2 <- coefficients_accumulated_modified %>% dplyr::distinct(Tissue, Year, y_axis_upper_limit, size)
print('Im here3')
long_dataset2 <- long_dataset%>% left_join(coefficients_accumulated_modified2, by=c('Year'='Year','Tissue'='Tissue','size'='size'))
print('Im here4')
replacing_na <-function(x){
if(is.na(x[10])==TRUE){
x[10]<-x[7]
}
return(x)
}
long_dataset_modified <-data.frame(t(apply(long_dataset2, 1, replacing_na)))
colnames(long_dataset_modified) <- colnames(long_dataset2)
long_dataset_modified$y_axis_upper_limit <- as.numeric(long_dataset_modified$y_axis_upper_limit)
long_dataset_modified1<-long_dataset_modified %>% group_by(Tissue) %>% filter(y_axis_upper_limit==max(y_axis_upper_limit))
long_dataset_modified2<-long_dataset_modified1 %>% dplyr::distinct(Tissue, y_axis_upper_limit)
print('Im here5')
df_scales <- data.frame(
Tissue = c("liver","stomach", "muscle", "inksac"),
ymin = c(0, 0, 0, 0),
ymax = c(NA),
n = c(5, 5, 5, 5))
df_scales %<>% inner_join(long_dataset_modified2, by= "Tissue") %>%
mutate(ymax = coalesce(y_axis_upper_limit)) %>%select(Tissue, ymin, ymax, n)
df_scales <- split(df_scales, df_scales$Tissue)
scales <- lapply(df_scales, function(x) {
scale_y_continuous(limits = c(x$ymin, x$ymax), n.breaks = x$n)
})
#For graphs----
Colors <-setNames( c('#F8766D', '#7CAE00', '#00A9FF'),sizes)
if(variable =='dta_km'){
dta_km <-long_dataset %>% ggplot(aes(variable, concentration, colour = size, group=size)) +
scale_colour_manual(values = Colors)+
geom_smooth(method=lm, se=FALSE)+
labs(title = paste('<B>',range_name,'::','</B>', variable,"Vs Conc mg/kg using size",sep =" "),
y = "Concentration mg/kg", x = paste(variable))+
theme(plot.title = ggtext::element_markdown())+
facet_grid(Tissue ~ Year, scales = "free", drop = FALSE)+
ggh4x::facetted_pos_scales(y = scales)+
geom_point(aes(shape = size, color = size), size = 2)+
{if(nrow(pvalues_accumulated)!=0) geom_text(pvalues_accumulated, mapping=aes(label=paste(rho, pvalues, sep= ",")),hjust =-0.7, size = 3.5, fontface="italic", position = position_dodge(width = .1), check_overlap = FALSE)}
#list0<-append(list(plt),list0, 0)
name0 <- paste(range_name,"plots", variable, sep = "")
list0names <- append(list0names,name0)
}else if (variable =='dtfl_km') {
Colors <-setNames(c('#F8766D', '#7CAE00', '#00A9FF'),sizes)
dtfl_km <-long_dataset %>% ggplot(aes(variable, concentration, colour = size, group=size)) +
scale_colour_manual(values = Colors)+
geom_smooth(method=lm, se=FALSE)+
labs(title = paste('<B>',range_name,'::','</B>', variable,"Vs Conc mg/kg using size",sep =" "),
y = "Concentration mg/kg", x = paste(variable))+
theme(plot.title = ggtext::element_markdown())+
facet_grid(Tissue ~ Year, scales = "free", drop = FALSE)+
ggh4x::facetted_pos_scales(y = scales)+
geom_point(aes(shape = size, color = size), size = 2)+
{if(nrow(pvalues_accumulated)!=0) geom_text(pvalues_accumulated, mapping=aes(label=paste(rho, pvalues, sep= ",")),hjust =-0.7, size = 3.5, fontface="italic", position = position_dodge(width = .1), check_overlap = FALSE)}
#list1<-append(list(plt),list1, 0)
name1 <- paste(range_name,"plots", variable, sep = "")
list1names <- append(list1names,name1)
}else{
Colors <-setNames( c('#F8766D', '#7CAE00', '#00A9FF'),sizes)
MOC <-long_dataset %>% ggplot(aes(variable, concentration, colour = size, group=size)) +
scale_colour_manual(values = Colors)+
geom_smooth(method=lm, se=FALSE)+
labs(title = paste('<B>',range_name,'::','</B>', variable,"Vs Conc mg/kg using size",sep =" "),
y = "Concentration mg/kg", x = paste(variable))+
theme(plot.title = ggtext::element_markdown())+
facet_grid(Tissue ~ Year, scales = "free", drop = FALSE)+
ggh4x::facetted_pos_scales(y = scales)+
geom_point(aes(shape = size, color = size), size = 2)+
{if(nrow(pvalues_accumulated)!=0) geom_text(pvalues_accumulated, mapping=aes(label=paste(rho, pvalues, sep= ",")),hjust =-0.7, size = 3.5, fontface="italic", position = position_dodge(width = .1), check_overlap = FALSE)}
#list2<-append(list(plt),list2, 0)
name2 <- paste(range_name,"plots", variable, sep = "")
list2names <- append(list2names,name2)
}
}
#}
h<-h+1
# names(plt1)<-list0names
# names(plt2)<-list1names
# names(plt3)<-list2names
}
return(list (dta_km=dta_km, dtfl_km=dtfl_km, MOC=MOC))
}
elements_from_data_mining_using_mantle_length <- data_mining_using_mantle_length (datasets_for_organic_compounds_data_distribution, remove.zeroes = TRUE)
#The figure entered for  y axis_modification....
get_coefficients <- function (x, axis_modification =.75){
# Saving factors to be used later for processing
sizes <- levels(factor(x$size)) #factor levels for sizes
tissues <- levels(factor(x$Tissue)) #factor levels for tissues
years <- levels(factor(x$Year)) #factor levels for years
#Setting indices for while loop based on tissue because...
s<-1
if(unique(x$Tissue)=='inksac'){
index <- 3
}else{
index <- 4
}
coefficient_dataframe_final <- data.frame(matrix(ncol=8, nrow = 0))
while(s != index) {
coefficient1 <- data.frame(matrix(ncol=8, nrow = 0))
coefficient2 <- data.frame(matrix(ncol=8, nrow = 0))
colnames(coefficient2) <- c('Tissue','Year','concentrations','variable','rho', 'pvalues' ,'y_axis_upper_limit','size')
colnames(coefficient1) <- c('Tissue','Year','concentrations', 'variable','rho', 'pvalues', 'y_axis_upper_limit', 'size')
coefficient_dataframe1 <- data.frame(matrix(ncol=8, nrow = 0))
colnames(coefficient_dataframe1) <- colnames(coefficient2)
colnames(coefficient_dataframe_final) <- colnames(coefficient2)
outlier  <-which(x$concentrations > quantile(x$concentrations,.99))#########
print('Im here haha')
outliers <- x$concentrations[c(outlier)]
if(length(outliers)!=0){
pollutant <- x[-c(outlier),]
#maxconcentration <- max(metmol2$concentration)
minimum_outlier <- min(outliers)
#print(M[h])
yscale <-minimum_outlier*axis_modification
#print(yscale)
}else{
yscale <-0
}
print(yscale)
subset_by_year <- filter(as.data.frame(x), Year == years[s])
print(years[s])
print(subset_by_year)
if(nrow(subset_by_year)!=0){
for (i in 1:length(sizes)){
size_dataframe <- filter(subset_by_year, size == sizes[i])
if(nrow(size_dataframe)<2|all(size_dataframe[-1,'concentrations'] == size_dataframe[1,'concentrations']|max(size_dataframe$concentrations)== 0)==TRUE){
coefficient1[1,1] <- unique(subset_by_year$Tissue)
coefficient1[1,2] <- years[s]
coefficient1[1,3] <- 0# X-coord for r coefficient and p-value
coefficient1[1,4] <- 0
coefficient1[1,5] <- 0
coefficient1[1,6] <- 0
coefficient1[1,7] <- max(size_dataframe$concentrations)
coefficient1[1,8] <- sizes[i]
coefficient_dataframe1 <- rbind(coefficient_dataframe1, coefficient1)
#next
}else if(max(size_dataframe$concentrations)!= 0 & str_detect(sizes[i], "large")== TRUE){
coefficient0 <- cor.test(as.numeric(as.factor(size_dataframe$values)), as.numeric(size_dataframe$concentrations), method="spearman", exact = FALSE)
coefficient1[1,1] <- unique(size_dataframe$Tissue)
coefficient1[1,2] <- years[s]
#coefficient1[1,3] <- unique(sizedf$SM)
coefficient1[1,3] <- signif((yscale*.95), 3)# X-coord for r coefficient and p-value
if(unique(subset_by_year$vars) == 'dtfl_km' & unique(subset_by_year$Year)== '2019'){
coefficient1[1,4] <- max(subset_by_year$values)*.75
}else if (unique(subset_by_year$vars) == 'dtfl_km' & unique(subset_by_year$Year)== '2020'){
coefficient1[1,4] <- max(subset_by_year$values)*.85
}else if (unique(subset_by_year$vars) == 'dtfl_km' & unique(subset_by_year$Year)== '2021'){
coefficient1[1,4] <- max(subset_by_year$values)*.5
}else if (unique(subset_by_year$vars) == 'dta_km' & unique(subset_by_year$Year)== '2019'){
coefficient1[1,4] <- min(subset_by_year$values)
}else if (unique(subset_by_year$vars) == 'dta_km' & unique(subset_by_year$Year)== '2020'){
coefficient1[1,4] <- min(subset_by_year$values)
}else if (unique(subset_by_year$vars) == 'dta_km' & unique(subset_by_year$Year)== '2021'){
coefficient1[1,4] <- min(subset_by_year$values)
}else{
coefficient1[1,4] <- max(as.numeric(as.factor(subset_by_year$values)))*.5
}
coefficient1[1,5] <- coefficient0$estimate
coefficient1[1,6] <- coefficient0$p.value
coefficient1[1,7] <- yscale
coefficient1[1,8] <- unique(size_dataframe$size)
coefficient_dataframe1 <- rbind(coefficient_dataframe1, coefficient1)
#print(coefficient_dataframe1)
}else if(max(size_dataframe$concentrations)!= 0 & str_detect(sizes[i], "medium")== TRUE){
coefficient0 <- cor.test(as.numeric(as.factor(size_dataframe$values)), as.numeric(size_dataframe$concentrations), method="spearman", exact = FALSE)
coefficient1[1,1] <- unique(size_dataframe$Tissue)
coefficient1[1,2] <- years[s]
#coefficient1[1,3] <- unique(sizedf$SM)
coefficient1[1,3] <- signif((yscale*.85), 3)
if(unique(subset_by_year$vars) == 'dtfl_km' & unique(subset_by_year$Year)== '2019'){
coefficient1[1,4] <- max(subset_by_year$values)*.75
}else if (unique(subset_by_year$vars) == 'dtfl_km' & unique(subset_by_year$Year)== '2020'){
coefficient1[1,4] <- max(subset_by_year$values)*.85
}else if (unique(subset_by_year$vars) == 'dtfl_km' & unique(subset_by_year$Year)== '2021'){
coefficient1[1,4] <- max(subset_by_year$values)*.5
}else if (unique(subset_by_year$vars) == 'dta_km' & unique(subset_by_year$Year)== '2019'){
coefficient1[1,4] <- min(subset_by_year$values)
}else if (unique(subset_by_year$vars) == 'dta_km' & unique(subset_by_year$Year)== '2020'){
coefficient1[1,4] <- min(subset_by_year$values)
}else if (unique(subset_by_year$vars) == 'dta_km' & unique(subset_by_year$Year)== '2021'){
coefficient1[1,4] <- min(subset_by_year$values)
}else{
coefficient1[1,4] <- max(as.numeric(as.factor(subset_by_year$values)))*.5
}
coefficient1[1,5] <- coefficient0$estimate
coefficient1[1,6] <- coefficient0$p.value
coefficient1[1,7] <- yscale
coefficient1[1,8] <- unique(size_dataframe$size)
coefficient_dataframe1 <- rbind(coefficient_dataframe1, coefficient1)
}else if(max(size_dataframe$concentrations)!= 0 & str_detect(sizes[i], "small")== TRUE){
coefficient0 <- cor.test(as.numeric(as.factor(size_dataframe$values)), as.numeric(size_dataframe$concentrations), method="spearman", exact = FALSE)
coefficient1[1,1] <- unique(size_dataframe$Tissue)
coefficient1[1,2] <- years[s]
#coefficient1[1,3] <- unique(sizedf$SM)
coefficient1[1,3] <- signif((yscale*.75), 3)
if(unique(subset_by_year$vars) == 'dtfl_km' & unique(subset_by_year$Year)== '2019'){
coefficient1[1,4] <- max(subset_by_year$values)*.75
}else if (unique(subset_by_year$vars) == 'dtfl_km' & unique(subset_by_year$Year)== '2020'){
coefficient1[1,4] <- max(subset_by_year$values)*.85
}else if (unique(subset_by_year$vars) == 'dtfl_km' & unique(subset_by_year$Year)== '2021'){
coefficient1[1,4] <- max(subset_by_year$values)*.5
}else if (unique(subset_by_year$vars) == 'dta_km' & unique(subset_by_year$Year)== '2019'){
coefficient1[1,4] <- min(subset_by_year$values)
}else if (unique(subset_by_year$vars) == 'dta_km' & unique(subset_by_year$Year)== '2020'){
coefficient1[1,4] <- min(subset_by_year$values)
}else if (unique(subset_by_year$vars) == 'dta_km' & unique(subset_by_year$Year)== '2021'){
coefficient1[1,4] <- min(subset_by_year$values)
}else{
coefficient1[1,4] <- max(as.numeric(as.factor(subset_by_year$values)))*.5
}
coefficient1[1,5] <- coefficient0$estimate
coefficient1[1,6] <- coefficient0$p.value
coefficient1[1,7] <- yscale
coefficient1[1,8] <- unique(size_dataframe$size)
coefficient_dataframe1 <- rbind(coefficient_dataframe1, coefficient1)
}
}
}
s<-s+1
coefficient_dataframe_final <- rbind(coefficient_dataframe_final, coefficient_dataframe1)
coefficient_dataframe_final$Tissue <- as.character(coefficient_dataframe_final$Tissue)
coefficient_dataframe_final$Year <- as.character(coefficient_dataframe_final$Year)
#coefficient_dataframe_final$SM <- as.character(coefficient_dataframe_final$SM)
}
return (coefficient_dataframe_final)
}
coefficient_modification <- function(x){
x$rho <- signif(x$rho, 4)
x$pvalues <- signif(x$pvalues)
#x$rho<-ifelse(x$pvalues>0.05|x$pvalues==0, is.na(x$rho), x$rho)
x$rho[x$pvalues > 0.05 | x$pvalues == 0] <- NA
#x$pvalues<-ifelse(x$pvalues>0.05|x$pvalues==0, is.na(x$pvalues),x$pvalues) #x$pvalues==NA
x$pvalues[x$pvalues > 0.05 | x$pvalues == 0] <- NA
x$rho <- paste0("r=",x$rho)
x$pvalues <- paste0("p-val=",x$pvalues)
x$pvalues[duplicated(x$pvalues)] <- NA
x$rho[duplicated(x$rho)] <- NA
x$rho <- gsub(".*NA.*", NA,x$rho)
x$pvalues <- gsub(".*NA.*", NA,x$pvalues)
x$rho[is.na(x$rho)] <- 0
x$pvalues[is.na(x$pvalues)] <- 0
x$pvalues[is.nan(x$pvalues)] <- 0
modified_coefficients <-as.data.frame(subset(x, pvalues!= 0))
return(modified_coefficients)
}
data_mining_using_mantle_length <- function(data_list, remove.zeroes=FALSE){
#Extracting dataset_with_numerical_values from datalist
#dataset0 <- data_list$dataset_with_numerical_values
#dataset1 <-matrix(unlist(dataset0), ncol = 12) #unlisting dataset and converting it to a matrix
dataset_with_numerical_values <- data_list$dataset_with_numerical_values
list0 <- list()
list1 <- list()
list2 <- list()
list0names <- c()
list1names <- c()
list2names <- c()
if (grepl("Fe|Ag", colnames(dataset_with_numerical_values)[16])) {
#This is to find the number of rows for in the first 1/3 of the dataset and save it as an idex to help categorizes the squids by their  sizes.
index <-round(1/3* nrow(dataset_with_numerical_values))
#Ordering the values within the Mantle Length column in ascending order
dataset_with_numerical_values <- dataset_with_numerical_values[order(dataset_with_numerical_values[["Mantle_length_mm"]]),]
# Adding the size column for further processing
dataset_with_numerical_values$size=NA
dataset_with_numerical_values$size[1:index]= paste('small','(',min(dataset_with_numerical_values$Mantle_length_mm[1:index]),'mm-',max(dataset_with_numerical_values$Mantle_length_mm[1:index]),'mm',')', sep = "")
dataset_with_numerical_values$size[c(index+1):c(index*2)]=paste('medium','(',min(dataset_with_numerical_values$Mantle_length_mm[c(index+1):c(index*2)]),'mm-',max(dataset_with_numerical_values$Mantle_length_mm[c(index+1):c(index*2)]),'mm',')', sep="")
dataset_with_numerical_values$size[c(index*2+1):c(index*3)]=paste('large','(',min(dataset_with_numerical_values$Mantle_length_mm[c(index*2+1):c(index*3)]),'mm-',max(dataset_with_numerical_values$Mantle_length_mm[c(index*2+1):c(index*3)]),'mm',')',sep = "")
dataset_with_numerical_values <- dataset_with_numerical_values %>% relocate(size, .after = dtfl_km)
#print(y[c(280:600),])
range <- colnames(dataset_with_numerical_values[17:26])
range_name <-'Fe:Pb'
number_range <- 17:26
subsetted_dataset_with_numerical_values <-dataset_with_numerical_values[,c(number_range,3, 6)]# streamlining dataframe for efficiency for heavy metals
}else{
#This is to find the number of rows for in the first 1/3 of the dataset and save it as an idex to help categorizes the squids by their  sizes.
index <-round(1/3* nrow(dataset_with_numerical_values))
#Ordering the values within the Mantle Length column in ascending order
dataset_with_numerical_values <- dataset_with_numerical_values[order(dataset_with_numerical_values[["Mantle_length_mm"]]),]
# Adding the size column for further processing
dataset_with_numerical_values$size=NA
# After ordering the mantle lengths in ascending order and finding the number of rows  for the first 1/3 of the dataset, this piece of code below categorizes the mantle sizes by "small', 'medium' and 'large'. For example the first 1/3 would be small and then it shows the minimum and maximum sizes, then second 1/3 would be medium and so..
dataset_with_numerical_values$size[1:index]= paste('small','(',min(dataset_with_numerical_values$Mantle_length_mm[1:index]),'mm-',max(dataset_with_numerical_values$Mantle_length_mm[1:index]),'mm',')', sep = "")
dataset_with_numerical_values$size[c(index+1):c(index*2)]=paste('medium','(',min(dataset_with_numerical_values$Mantle_length_mm[c(index+1):c(index*2)]),'mm-',max(dataset_with_numerical_values$Mantle_length_mm[c(index+1):c(index*2)]),'mm',')', sep="")
dataset_with_numerical_values$size[c(index*2+1):c(index*3)]=paste('large','(',min(dataset_with_numerical_values$Mantle_length_mm[c(index*2+1):c(index*3)]),'mm-',max(dataset_with_numerical_values$Mantle_length_mm[c(index*2+1):c(index*3)]),'mm',')',sep = "")
dataset_with_numerical_values <- dataset_with_numerical_values %>% relocate(size, .after = dtfl_km)
range <- colnames(dataset_with_numerical_values[17:20])
range_name <-'Adipic_acid:Ibuprofen'
number_range <- 17:20
subsetted_dataset_with_numerical_values <-dataset_with_numerical_values[,c(number_range,3, 6,7:12)]# streamlining dataframe for efficiency for heavy metals
}
h<-1
subsetted_dataset_with_variables <-dataset_with_numerical_values[,c(7,8)]
while(h != 4){
variable <- colnames(subsetted_dataset_with_variables)[h]
print(variable)
coefficients_accumulated <- data.frame(matrix(ncol=9, nrow = 0))
pvalues <- data.frame(matrix(ncol=9, nrow = 0))
subsetted_dataset_with_numerical_values2 <-subsetted_dataset_with_numerical_values
sizes <- levels(factor(subsetted_dataset_with_numerical_values2$size))
years <- levels(factor(subsetted_dataset_with_numerical_values2$Year))
tissues <- levels(factor(subsetted_dataset_with_numerical_values2$Tissue))
if(remove.zeroes==FALSE){
long_dataset<- subsetted_dataset_with_numerical_values2 %>% pivot_longer(all_of(range), names_to = "pollutants", values_to = "concentrations")%>%pivot_longer (!! rlang::sym(paste0(variable)), names_to = "vars", values_to = "values") %>%
mutate(concentrations = as.numeric(concentrations),   # Convert 'concentrations' to numeric
values = as.numeric(values))                    # Convert 'values' to numeric (if needed)
}else{
long_dataset<- subsetted_dataset_with_numerical_values2 %>% pivot_longer(all_of(range), names_to = "pollutants", values_to = "concentrations")%>%pivot_longer (!! rlang::sym(paste0(variable)), names_to = "vars", values_to = "values")%>%subset(concentrations !=0) %>%
mutate(
concentrations = as.numeric(concentrations),   # Convert 'concentrations' to numeric
values = as.numeric(values))                    # Convert 'values' to numeric (if needed)
}
if(nrow(long_dataset)!= 0){
for(i in 1:length(tissues)){
long_dataset_subsetted_by_tissue <-data.frame(long_dataset %>% group_by(Year) %>% subset(Tissue == tissues[i]))
if((nrow(long_dataset_subsetted_by_tissue)!=0)==TRUE){
print('Im here0')
coefficients <- get_coefficients(long_dataset_subsetted_by_tissue)##########
print(coefficients)
coefficients_accumulated <- rbind(coefficients_accumulated, coefficients)
}
}
pvalues <- coefficient_modification(coefficients_accumulated)
print('Im here1')
print(pvalues)
pvalues_accumulated <- rbind(pvalues_accumulated, pvalues)
#print(pvalues_accumulated)
print('Im here2')
#Below is for setting y scale----
coefficients_accumulated_modified <-coefficients_accumulated[,-c(4:6)]
#print(coefficients_accumulated_modified)
coefficients_accumulated_modified2 <- coefficients_accumulated_modified %>% dplyr::distinct(Tissue, Year, y_axis_upper_limit, size)
print('Im here3')
long_dataset2 <- long_dataset%>% left_join(coefficients_accumulated_modified2, by=c('Year'='Year','Tissue'='Tissue','size'='size'))
print('Im here4')
replacing_na <-function(x){
if(is.na(x[10])==TRUE){
x[10]<-x[7]
}
return(x)
}
long_dataset_modified <-data.frame(t(apply(long_dataset2, 1, replacing_na)))
colnames(long_dataset_modified) <- colnames(long_dataset2)
long_dataset_modified$y_axis_upper_limit <- as.numeric(long_dataset_modified$y_axis_upper_limit)
long_dataset_modified1<-long_dataset_modified %>% group_by(Tissue) %>% filter(y_axis_upper_limit==max(y_axis_upper_limit))
long_dataset_modified2<-long_dataset_modified1 %>% dplyr::distinct(Tissue, y_axis_upper_limit)
print('Im here5')
df_scales <- data.frame(
Tissue = c("liver","stomach", "muscle", "inksac"),
ymin = c(0, 0, 0, 0),
ymax = c(NA),
n = c(5, 5, 5, 5))
df_scales %<>% inner_join(long_dataset_modified2, by= "Tissue") %>%
mutate(ymax = coalesce(y_axis_upper_limit)) %>%select(Tissue, ymin, ymax, n)
df_scales <- split(df_scales, df_scales$Tissue)
scales <- lapply(df_scales, function(x) {
scale_y_continuous(limits = c(x$ymin, x$ymax), n.breaks = x$n)
})
#For graphs----
Colors <-setNames( c('#F8766D', '#7CAE00', '#00A9FF'),sizes)
if(variable =='dta_km'){
dta_km <-long_dataset %>% ggplot(aes(variable, concentration, colour = size, group=size)) +
scale_colour_manual(values = Colors)+
geom_smooth(method=lm, se=FALSE)+
labs(title = paste('<B>',range_name,'::','</B>', variable,"Vs Conc mg/kg using size",sep =" "),
y = "Concentration mg/kg", x = paste(variable))+
theme(plot.title = ggtext::element_markdown())+
facet_grid(Tissue ~ Year, scales = "free", drop = FALSE)+
ggh4x::facetted_pos_scales(y = scales)+
geom_point(aes(shape = size, color = size), size = 2)+
{if(nrow(pvalues_accumulated)!=0) geom_text(pvalues_accumulated, mapping=aes(label=paste(rho, pvalues, sep= ",")),hjust =-0.7, size = 3.5, fontface="italic", position = position_dodge(width = .1), check_overlap = FALSE)}
#list0<-append(list(plt),list0, 0)
name0 <- paste(range_name,"plots", variable, sep = "")
list0names <- append(list0names,name0)
}else if (variable =='dtfl_km') {
Colors <-setNames(c('#F8766D', '#7CAE00', '#00A9FF'),sizes)
dtfl_km <-long_dataset %>% ggplot(aes(variable, concentration, colour = size, group=size)) +
scale_colour_manual(values = Colors)+
geom_smooth(method=lm, se=FALSE)+
labs(title = paste('<B>',range_name,'::','</B>', variable,"Vs Conc mg/kg using size",sep =" "),
y = "Concentration mg/kg", x = paste(variable))+
theme(plot.title = ggtext::element_markdown())+
facet_grid(Tissue ~ Year, scales = "free", drop = FALSE)+
ggh4x::facetted_pos_scales(y = scales)+
geom_point(aes(shape = size, color = size), size = 2)+
{if(nrow(pvalues_accumulated)!=0) geom_text(pvalues_accumulated, mapping=aes(label=paste(rho, pvalues, sep= ",")),hjust =-0.7, size = 3.5, fontface="italic", position = position_dodge(width = .1), check_overlap = FALSE)}
#list1<-append(list(plt),list1, 0)
name1 <- paste(range_name,"plots", variable, sep = "")
list1names <- append(list1names,name1)
}else{
Colors <-setNames( c('#F8766D', '#7CAE00', '#00A9FF'),sizes)
MOC <-long_dataset %>% ggplot(aes(variable, concentration, colour = size, group=size)) +
scale_colour_manual(values = Colors)+
geom_smooth(method=lm, se=FALSE)+
labs(title = paste('<B>',range_name,'::','</B>', variable,"Vs Conc mg/kg using size",sep =" "),
y = "Concentration mg/kg", x = paste(variable))+
theme(plot.title = ggtext::element_markdown())+
facet_grid(Tissue ~ Year, scales = "free", drop = FALSE)+
ggh4x::facetted_pos_scales(y = scales)+
geom_point(aes(shape = size, color = size), size = 2)+
{if(nrow(pvalues_accumulated)!=0) geom_text(pvalues_accumulated, mapping=aes(label=paste(rho, pvalues, sep= ",")),hjust =-0.7, size = 3.5, fontface="italic", position = position_dodge(width = .1), check_overlap = FALSE)}
#list2<-append(list(plt),list2, 0)
name2 <- paste(range_name,"plots", variable, sep = "")
list2names <- append(list2names,name2)
}
}
#}
h<-h+1
# names(plt1)<-list0names
# names(plt2)<-list1names
# names(plt3)<-list2names
}
return(list (dta_km=dta_km, dtfl_km=dtfl_km, MOC=MOC))
}
elements_from_data_mining_using_mantle_length <- data_mining_using_mantle_length (datasets_for_organic_compounds_data_distribution, remove.zeroes = TRUE)
